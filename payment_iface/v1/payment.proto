syntax = "proto3";
package payment_iface.v1;

import "buf/validate/validate.proto";
import "common/v1/common.proto";

option go_package = "github.com/pdcgo/schema/services/payment_iface/v1;payment_iface";

// Service
service PaymentService {
  rpc PaymentCreate(PaymentCreateRequest) returns (PaymentCreateResponse);
  rpc PaymentCancel(PaymentCancelRequest) returns (PaymentCancelResponse);
  rpc PaymentAccept(PaymentAcceptRequest) returns (PaymentAcceptResponse);
  rpc PaymentReject(PaymentRejectRequest) returns (PaymentRejectResponse);
  rpc PaymentList(PaymentListRequest) returns (PaymentListResponse);
  rpc PaymentGet(PaymentGetRequest) returns (PaymentGetResponse);
}

enum PaymentType {
  PAYMENT_TYPE_UNSPECIFIED = 0;
  PAYMENT_TYPE_OTHER = 1;
  PAYMENT_TYPE_PRODUCT_CROSS = 2;
}

enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_PENDING = 1;
  PAYMENT_STATUS_REJECTED = 2;
  PAYMENT_STATUS_ACCEPTED = 3;
  PAYMENT_STATUS_CANCELED = 4;
}

message PaymentGetRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 payment_id = 2 [(buf.validate.field).uint64.gt = 0];
}

message PaymentGetResponse {
  Payment data = 1;
}

message PaymentCreateRequest {
  uint64 from_team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 to_team_id = 2 [(buf.validate.field).uint64.gt = 0];
  double amount = 3 [(buf.validate.field).double.gt = 0];
  PaymentType payment_type = 4 [(buf.validate.field).enum.defined_only = true];
  string description = 5 [
    (buf.validate.field).string.min_len = 1, // must not be empty
    (buf.validate.field).string.max_len = 1024 // max length 255 chars
  ];
}

message PaymentCreateResponse {
  uint64 payment_id = 1;
  PaymentStatus status = 2;
}

message PaymentCancelRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 payment_id = 2 [(buf.validate.field).uint64.gt = 0];
  string reason = 3 [
    (buf.validate.field).string.min_len = 1, // must not be empty
    (buf.validate.field).string.max_len = 1024 // limit length
  ];
}

message PaymentCancelResponse {}

message PaymentAcceptRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 payment_id = 2 [(buf.validate.field).uint64.gt = 0];
}

message PaymentAcceptResponse {}

message PaymentRejectRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 payment_id = 2 [(buf.validate.field).uint64.gt = 0];
  string reason = 3 [
    (buf.validate.field).string.min_len = 1, // must not be empty
    (buf.validate.field).string.max_len = 1024 // limit length
  ];
}

message PaymentRejectResponse {}

enum PaymentTimeType {
  PAYMENT_TIME_TYPE_UNSPECIFIED = 0;
  PAYMENT_TIME_TYPE_CREATED = 1;
  PAYMENT_TIME_TYPE_ACCEPTED = 2;
}

enum PaymentSource {
  PAYMENT_SOURCE_UNSPECIFIED = 0;
  PAYMENT_SOURCE_FROM = 1;
  PAYMENT_SOURCE_TO = 2;
}

message PaymentListRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  PaymentSource source = 2;
  PaymentType payment_type = 3;
  PaymentTimeType time_filter_type = 4;
  common.v1.TimeFilter time_range = 5 [(buf.validate.field).required = true];
  common.v1.PageFilter page = 6 [(buf.validate.field).required = true];
}

message PaymentListResponse {
  repeated Payment payments = 1;
  common.v1.PageInfo page_info = 2;
}

// Entity
message Payment {
  uint64 id = 1;
  uint64 from_team_id = 2;
  uint64 to_team_id = 3;
  double amount = 4;
  PaymentType payment_type = 5;
  PaymentStatus status = 6;
  int64 created_at = 7;
  int64 accepted_at = 8;
}
