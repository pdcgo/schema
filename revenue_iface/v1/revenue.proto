syntax = "proto3";
package revenue_iface.v1;

import "buf/validate/validate.proto";
import "common/v1/common.proto";

option go_package = "github.com/pdcgo/schema/services/revenue_iface/v1;revenue_iface";

service RevenueService {
  rpc OnOrder(OnOrderRequest) returns (OnOrderResponse);
  rpc OrderCancel(OrderCancelRequest) returns (OrderCancelResponse);
  rpc OrderReturn(OrderReturnRequest) returns (OrderReturnResponse);
  rpc OrderCompleted(OrderCompletedRequest) returns (OrderCompletedResponse);
  rpc RevenueAdjustment(RevenueAdjustmentRequest) returns (RevenueAdjustmentResponse);
  rpc Withdrawal(WithdrawalRequest) returns (WithdrawalResponse);
}

message RevenueAdjustmentRequest {}
message RevenueAdjustmentResponse {}

message OrderCompletedRequest {}
message OrderCompletedResponse {}

enum ProblemType {
  PROBLEM_TYPE_UNSPECIFIED = 0;
  PROBLEM_TYPE_LOST = 1;
}

message OrderReturnRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 order_id = 2 [(buf.validate.field).uint64.gt = 0];
  uint64 warehouse_id = 3 [(buf.validate.field).uint64.gt = 0];
  double order_amount = 4 [
    (buf.validate.field).double.gt = 0, // must be > 0
    (buf.validate.field).double.lte = 1e12 // optional: cap max value for safety
  ];
  double stock_amount = 5 [
    (buf.validate.field).double.gt = 0, // must be > 0
    (buf.validate.field).double.lte = 1e12 // optional: cap max value for safety
  ];
}
message OrderReturnResponse {}

// message OrderAdjustmentRequest {}
// message OrderAdjustmentResponse {}

message WithdrawalRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0]; // must be > 0
  uint64 shop_id = 2 [(buf.validate.field).uint64.gt = 0]; // must be > 0
  // uint64 order_id = 3 [(buf.validate.field).uint64.gt = 0]; // must be > 0
  int64 at = 4 [(buf.validate.field).int64.gt = 0]; // timestamp must be > 0
  double amount = 5 [
    (buf.validate.field).double.gt = 0, // must be > 0
    (buf.validate.field).double.lte = 1e12 // optional: cap max value for safety
  ];
}

message WithdrawalResponse {}

message OrderCancelRequest {
  uint64 team_id = 1 [(buf.validate.field).uint64.gt = 0];
  uint64 order_id = 2 [(buf.validate.field).uint64.gt = 0];
}
message OrderCancelResponse {}

message BorrowStock {
  uint64 team_id = 1;
  double amount = 2;
  double sell_amount = 3;
}

enum OrderEvent {
  ORDER_EVENT_UNSPECIFIED = 0;
  ORDER_EVENT_CREATED = 1;
  ORDER_EVENT_RETURN = 3;
}

message OnOrderRequest {
  string token = 1 [(buf.validate.field).required = true];
  uint64 team_id = 2 [(buf.validate.field).uint64 = {gt: 0}];
  uint64 warehouse_id = 3 [(buf.validate.field).uint64 = {gt: 0}];
  uint64 order_id = 4 [(buf.validate.field).required = true];
  OrderEvent event = 5 [(buf.validate.field).enum = {defined_only: true}];
  common.v1.MarketplaceType marketplace_type = 11 [(buf.validate.field).enum = {
    defined_only: true
    not_in: [0]
  }];
  double order_amount = 6 [(buf.validate.field).double = {gt: 0}];
  double warehouse_fee = 7 [(buf.validate.field).double = {gte: 0}];
  // string description = 8 [(buf.validate.field).string = {max_len: 1024}];
  repeated BorrowStock borrow_stock = 9;
  double own_stock_amount = 10;

  // ðŸ‘‡ cross-field validation: either borrow_stock > 0 OR own_stock_amount > 0
  option (buf.validate.message).cel = {
    id: "stock_source_required"
    expression: "size(this.borrow_stock) > 0 || this.own_stock_amount > 0"
    message: "Either borrow_stock must not be empty or own_stock_amount must be greater than 0."
  };
}

message OnOrderResponse {}
