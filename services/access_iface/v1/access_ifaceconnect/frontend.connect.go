// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: access_iface/v1/frontend.proto

package access_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/access_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendAccessServiceName is the fully-qualified name of the FrontendAccessService service.
	FrontendAccessServiceName = "access_iface.v1.FrontendAccessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendAccessServiceSetupAccessProcedure is the fully-qualified name of the
	// FrontendAccessService's SetupAccess RPC.
	FrontendAccessServiceSetupAccessProcedure = "/access_iface.v1.FrontendAccessService/SetupAccess"
	// FrontendAccessServiceMenuAccessProcedure is the fully-qualified name of the
	// FrontendAccessService's MenuAccess RPC.
	FrontendAccessServiceMenuAccessProcedure = "/access_iface.v1.FrontendAccessService/MenuAccess"
)

// FrontendAccessServiceClient is a client for the access_iface.v1.FrontendAccessService service.
type FrontendAccessServiceClient interface {
	SetupAccess(context.Context, *connect.Request[v1.SetupAccessRequest]) (*connect.ServerStreamForClient[v1.SetupAccessResponse], error)
	MenuAccess(context.Context, *connect.Request[v1.MenuAccessRequest]) (*connect.Response[v1.MenuAccessResponse], error)
}

// NewFrontendAccessServiceClient constructs a client for the access_iface.v1.FrontendAccessService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendAccessServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendAccessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendAccessServiceMethods := v1.File_access_iface_v1_frontend_proto.Services().ByName("FrontendAccessService").Methods()
	return &frontendAccessServiceClient{
		setupAccess: connect.NewClient[v1.SetupAccessRequest, v1.SetupAccessResponse](
			httpClient,
			baseURL+FrontendAccessServiceSetupAccessProcedure,
			connect.WithSchema(frontendAccessServiceMethods.ByName("SetupAccess")),
			connect.WithClientOptions(opts...),
		),
		menuAccess: connect.NewClient[v1.MenuAccessRequest, v1.MenuAccessResponse](
			httpClient,
			baseURL+FrontendAccessServiceMenuAccessProcedure,
			connect.WithSchema(frontendAccessServiceMethods.ByName("MenuAccess")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendAccessServiceClient implements FrontendAccessServiceClient.
type frontendAccessServiceClient struct {
	setupAccess *connect.Client[v1.SetupAccessRequest, v1.SetupAccessResponse]
	menuAccess  *connect.Client[v1.MenuAccessRequest, v1.MenuAccessResponse]
}

// SetupAccess calls access_iface.v1.FrontendAccessService.SetupAccess.
func (c *frontendAccessServiceClient) SetupAccess(ctx context.Context, req *connect.Request[v1.SetupAccessRequest]) (*connect.ServerStreamForClient[v1.SetupAccessResponse], error) {
	return c.setupAccess.CallServerStream(ctx, req)
}

// MenuAccess calls access_iface.v1.FrontendAccessService.MenuAccess.
func (c *frontendAccessServiceClient) MenuAccess(ctx context.Context, req *connect.Request[v1.MenuAccessRequest]) (*connect.Response[v1.MenuAccessResponse], error) {
	return c.menuAccess.CallUnary(ctx, req)
}

// FrontendAccessServiceHandler is an implementation of the access_iface.v1.FrontendAccessService
// service.
type FrontendAccessServiceHandler interface {
	SetupAccess(context.Context, *connect.Request[v1.SetupAccessRequest], *connect.ServerStream[v1.SetupAccessResponse]) error
	MenuAccess(context.Context, *connect.Request[v1.MenuAccessRequest]) (*connect.Response[v1.MenuAccessResponse], error)
}

// NewFrontendAccessServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendAccessServiceHandler(svc FrontendAccessServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendAccessServiceMethods := v1.File_access_iface_v1_frontend_proto.Services().ByName("FrontendAccessService").Methods()
	frontendAccessServiceSetupAccessHandler := connect.NewServerStreamHandler(
		FrontendAccessServiceSetupAccessProcedure,
		svc.SetupAccess,
		connect.WithSchema(frontendAccessServiceMethods.ByName("SetupAccess")),
		connect.WithHandlerOptions(opts...),
	)
	frontendAccessServiceMenuAccessHandler := connect.NewUnaryHandler(
		FrontendAccessServiceMenuAccessProcedure,
		svc.MenuAccess,
		connect.WithSchema(frontendAccessServiceMethods.ByName("MenuAccess")),
		connect.WithHandlerOptions(opts...),
	)
	return "/access_iface.v1.FrontendAccessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendAccessServiceSetupAccessProcedure:
			frontendAccessServiceSetupAccessHandler.ServeHTTP(w, r)
		case FrontendAccessServiceMenuAccessProcedure:
			frontendAccessServiceMenuAccessHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendAccessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendAccessServiceHandler struct{}

func (UnimplementedFrontendAccessServiceHandler) SetupAccess(context.Context, *connect.Request[v1.SetupAccessRequest], *connect.ServerStream[v1.SetupAccessResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("access_iface.v1.FrontendAccessService.SetupAccess is not implemented"))
}

func (UnimplementedFrontendAccessServiceHandler) MenuAccess(context.Context, *connect.Request[v1.MenuAccessRequest]) (*connect.Response[v1.MenuAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("access_iface.v1.FrontendAccessService.MenuAccess is not implemented"))
}
