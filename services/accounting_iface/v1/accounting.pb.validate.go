// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_iface/v1/accounting.proto

package accounting_iface

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccountTypeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountTypeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountTypeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountTypeListRequestMultiError, or nil if none found.
func (m *AccountTypeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountTypeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountTypeListRequestMultiError(errors)
	}

	return nil
}

// AccountTypeListRequestMultiError is an error wrapping multiple validation
// errors returned by AccountTypeListRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountTypeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountTypeListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountTypeListRequestMultiError) AllErrors() []error { return m }

// AccountTypeListRequestValidationError is the validation error returned by
// AccountTypeListRequest.Validate if the designated constraints aren't met.
type AccountTypeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountTypeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountTypeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountTypeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountTypeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountTypeListRequestValidationError) ErrorName() string {
	return "AccountTypeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountTypeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountTypeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountTypeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountTypeListRequestValidationError{}

// Validate checks the field values on AccountTypeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountTypeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountTypeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountTypeItemMultiError, or nil if none found.
func (m *AccountTypeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountTypeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	if len(errors) > 0 {
		return AccountTypeItemMultiError(errors)
	}

	return nil
}

// AccountTypeItemMultiError is an error wrapping multiple validation errors
// returned by AccountTypeItem.ValidateAll() if the designated constraints
// aren't met.
type AccountTypeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountTypeItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountTypeItemMultiError) AllErrors() []error { return m }

// AccountTypeItemValidationError is the validation error returned by
// AccountTypeItem.Validate if the designated constraints aren't met.
type AccountTypeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountTypeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountTypeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountTypeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountTypeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountTypeItemValidationError) ErrorName() string { return "AccountTypeItemValidationError" }

// Error satisfies the builtin error interface
func (e AccountTypeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountTypeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountTypeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountTypeItemValidationError{}

// Validate checks the field values on AccountTypeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountTypeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountTypeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountTypeListResponseMultiError, or nil if none found.
func (m *AccountTypeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountTypeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountTypeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountTypeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountTypeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountTypeListResponseMultiError(errors)
	}

	return nil
}

// AccountTypeListResponseMultiError is an error wrapping multiple validation
// errors returned by AccountTypeListResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountTypeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountTypeListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountTypeListResponseMultiError) AllErrors() []error { return m }

// AccountTypeListResponseValidationError is the validation error returned by
// AccountTypeListResponse.Validate if the designated constraints aren't met.
type AccountTypeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountTypeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountTypeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountTypeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountTypeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountTypeListResponseValidationError) ErrorName() string {
	return "AccountTypeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountTypeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountTypeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountTypeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountTypeListResponseValidationError{}

// Validate checks the field values on LabelListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LabelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LabelListRequestMultiError, or nil if none found.
func (m *LabelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return LabelListRequestMultiError(errors)
	}

	return nil
}

// LabelListRequestMultiError is an error wrapping multiple validation errors
// returned by LabelListRequest.ValidateAll() if the designated constraints
// aren't met.
type LabelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelListRequestMultiError) AllErrors() []error { return m }

// LabelListRequestValidationError is the validation error returned by
// LabelListRequest.Validate if the designated constraints aren't met.
type LabelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelListRequestValidationError) ErrorName() string { return "LabelListRequestValidationError" }

// Error satisfies the builtin error interface
func (e LabelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelListRequestValidationError{}

// Validate checks the field values on LabelListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LabelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LabelListResponseMultiError, or nil if none found.
func (m *LabelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LabelListResponseMultiError(errors)
	}

	return nil
}

// LabelListResponseMultiError is an error wrapping multiple validation errors
// returned by LabelListResponse.ValidateAll() if the designated constraints
// aren't met.
type LabelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelListResponseMultiError) AllErrors() []error { return m }

// LabelListResponseValidationError is the validation error returned by
// LabelListResponse.Validate if the designated constraints aren't met.
type LabelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelListResponseValidationError) ErrorName() string {
	return "LabelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LabelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelListResponseValidationError{}

// Validate checks the field values on AccountUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountUpdateRequestMultiError, or nil if none found.
func (m *AccountUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for Name

	// no validation rules for NumberId

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountUpdateRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountUpdateRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountUpdateRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountUpdateRequestMultiError(errors)
	}

	return nil
}

// AccountUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AccountUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUpdateRequestMultiError) AllErrors() []error { return m }

// AccountUpdateRequestValidationError is the validation error returned by
// AccountUpdateRequest.Validate if the designated constraints aren't met.
type AccountUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateRequestValidationError) ErrorName() string {
	return "AccountUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateRequestValidationError{}

// Validate checks the field values on AccountUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountUpdateResponseMultiError, or nil if none found.
func (m *AccountUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AccountUpdateResponseMultiError(errors)
	}

	return nil
}

// AccountUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by AccountUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUpdateResponseMultiError) AllErrors() []error { return m }

// AccountUpdateResponseValidationError is the validation error returned by
// AccountUpdateResponse.Validate if the designated constraints aren't met.
type AccountUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateResponseValidationError) ErrorName() string {
	return "AccountUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateResponseValidationError{}

// Validate checks the field values on AccountDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountDeleteRequestMultiError, or nil if none found.
func (m *AccountDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountDeleteRequestMultiError(errors)
	}

	return nil
}

// AccountDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by AccountDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountDeleteRequestMultiError) AllErrors() []error { return m }

// AccountDeleteRequestValidationError is the validation error returned by
// AccountDeleteRequest.Validate if the designated constraints aren't met.
type AccountDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountDeleteRequestValidationError) ErrorName() string {
	return "AccountDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountDeleteRequestValidationError{}

// Validate checks the field values on AccountDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountDeleteResponseMultiError, or nil if none found.
func (m *AccountDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AccountDeleteResponseMultiError(errors)
	}

	return nil
}

// AccountDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by AccountDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountDeleteResponseMultiError) AllErrors() []error { return m }

// AccountDeleteResponseValidationError is the validation error returned by
// AccountDeleteResponse.Validate if the designated constraints aren't met.
type AccountDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountDeleteResponseValidationError) ErrorName() string {
	return "AccountDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountDeleteResponseValidationError{}

// Validate checks the field values on AccountItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountItemMultiError, or
// nil if none found.
func (m *AccountItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TeamId

	// no validation rules for Name

	// no validation rules for NumberId

	// no validation rules for AccountType

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountItemValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountItemValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountItemValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountItemMultiError(errors)
	}

	return nil
}

// AccountItemMultiError is an error wrapping multiple validation errors
// returned by AccountItem.ValidateAll() if the designated constraints aren't met.
type AccountItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountItemMultiError) AllErrors() []error { return m }

// AccountItemValidationError is the validation error returned by
// AccountItem.Validate if the designated constraints aren't met.
type AccountItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountItemValidationError) ErrorName() string { return "AccountItemValidationError" }

// Error satisfies the builtin error interface
func (e AccountItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountItemValidationError{}

// Validate checks the field values on AccountListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountListRequestMultiError, or nil if none found.
func (m *AccountListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return AccountListRequestMultiError(errors)
	}

	return nil
}

// AccountListRequestMultiError is an error wrapping multiple validation errors
// returned by AccountListRequest.ValidateAll() if the designated constraints
// aren't met.
type AccountListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountListRequestMultiError) AllErrors() []error { return m }

// AccountListRequestValidationError is the validation error returned by
// AccountListRequest.Validate if the designated constraints aren't met.
type AccountListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountListRequestValidationError) ErrorName() string {
	return "AccountListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountListRequestValidationError{}

// Validate checks the field values on AccountListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountListResponseMultiError, or nil if none found.
func (m *AccountListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountListResponseMultiError(errors)
	}

	return nil
}

// AccountListResponseMultiError is an error wrapping multiple validation
// errors returned by AccountListResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountListResponseMultiError) AllErrors() []error { return m }

// AccountListResponseValidationError is the validation error returned by
// AccountListResponse.Validate if the designated constraints aren't met.
type AccountListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountListResponseValidationError) ErrorName() string {
	return "AccountListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountListResponseValidationError{}

// Validate checks the field values on AccountCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCreateRequestMultiError, or nil if none found.
func (m *AccountCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for Name

	// no validation rules for NumberId

	// no validation rules for AccountTypeId

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountCreateRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountCreateRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCreateRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountCreateRequestMultiError(errors)
	}

	return nil
}

// AccountCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AccountCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCreateRequestMultiError) AllErrors() []error { return m }

// AccountCreateRequestValidationError is the validation error returned by
// AccountCreateRequest.Validate if the designated constraints aren't met.
type AccountCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreateRequestValidationError) ErrorName() string {
	return "AccountCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreateRequestValidationError{}

// Validate checks the field values on AccountCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCreateResponseMultiError, or nil if none found.
func (m *AccountCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AccountCreateResponseMultiError(errors)
	}

	return nil
}

// AccountCreateResponseMultiError is an error wrapping multiple validation
// errors returned by AccountCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCreateResponseMultiError) AllErrors() []error { return m }

// AccountCreateResponseValidationError is the validation error returned by
// AccountCreateResponse.Validate if the designated constraints aren't met.
type AccountCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreateResponseValidationError) ErrorName() string {
	return "AccountCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreateResponseValidationError{}
