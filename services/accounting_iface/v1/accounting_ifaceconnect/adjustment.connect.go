// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounting_iface/v1/adjustment.proto

package accounting_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/accounting_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdjustmentServiceName is the fully-qualified name of the AdjustmentService service.
	AdjustmentServiceName = "accounting_iface.v1.AdjustmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdjustmentServiceAdjCreateProcedure is the fully-qualified name of the AdjustmentService's
	// AdjCreate RPC.
	AdjustmentServiceAdjCreateProcedure = "/accounting_iface.v1.AdjustmentService/AdjCreate"
)

// AdjustmentServiceClient is a client for the accounting_iface.v1.AdjustmentService service.
type AdjustmentServiceClient interface {
	AdjCreate(context.Context, *connect.Request[v1.AdjCreateRequest]) (*connect.Response[v1.AdjCreateResponse], error)
}

// NewAdjustmentServiceClient constructs a client for the accounting_iface.v1.AdjustmentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdjustmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdjustmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adjustmentServiceMethods := v1.File_accounting_iface_v1_adjustment_proto.Services().ByName("AdjustmentService").Methods()
	return &adjustmentServiceClient{
		adjCreate: connect.NewClient[v1.AdjCreateRequest, v1.AdjCreateResponse](
			httpClient,
			baseURL+AdjustmentServiceAdjCreateProcedure,
			connect.WithSchema(adjustmentServiceMethods.ByName("AdjCreate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adjustmentServiceClient implements AdjustmentServiceClient.
type adjustmentServiceClient struct {
	adjCreate *connect.Client[v1.AdjCreateRequest, v1.AdjCreateResponse]
}

// AdjCreate calls accounting_iface.v1.AdjustmentService.AdjCreate.
func (c *adjustmentServiceClient) AdjCreate(ctx context.Context, req *connect.Request[v1.AdjCreateRequest]) (*connect.Response[v1.AdjCreateResponse], error) {
	return c.adjCreate.CallUnary(ctx, req)
}

// AdjustmentServiceHandler is an implementation of the accounting_iface.v1.AdjustmentService
// service.
type AdjustmentServiceHandler interface {
	AdjCreate(context.Context, *connect.Request[v1.AdjCreateRequest]) (*connect.Response[v1.AdjCreateResponse], error)
}

// NewAdjustmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdjustmentServiceHandler(svc AdjustmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adjustmentServiceMethods := v1.File_accounting_iface_v1_adjustment_proto.Services().ByName("AdjustmentService").Methods()
	adjustmentServiceAdjCreateHandler := connect.NewUnaryHandler(
		AdjustmentServiceAdjCreateProcedure,
		svc.AdjCreate,
		connect.WithSchema(adjustmentServiceMethods.ByName("AdjCreate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.AdjustmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdjustmentServiceAdjCreateProcedure:
			adjustmentServiceAdjCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdjustmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdjustmentServiceHandler struct{}

func (UnimplementedAdjustmentServiceHandler) AdjCreate(context.Context, *connect.Request[v1.AdjCreateRequest]) (*connect.Response[v1.AdjCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdjustmentService.AdjCreate is not implemented"))
}
