// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounting_iface/v1/ads_expense.proto

package accounting_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/accounting_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdsExpenseServiceName is the fully-qualified name of the AdsExpenseService service.
	AdsExpenseServiceName = "accounting_iface.v1.AdsExpenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdsExpenseServiceAdsExCreateProcedure is the fully-qualified name of the AdsExpenseService's
	// AdsExCreate RPC.
	AdsExpenseServiceAdsExCreateProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExCreate"
	// AdsExpenseServiceAdsExListProcedure is the fully-qualified name of the AdsExpenseService's
	// AdsExList RPC.
	AdsExpenseServiceAdsExListProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExList"
	// AdsExpenseServiceAdsExEditProcedure is the fully-qualified name of the AdsExpenseService's
	// AdsExEdit RPC.
	AdsExpenseServiceAdsExEditProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExEdit"
	// AdsExpenseServiceAdsExShopMetricProcedure is the fully-qualified name of the AdsExpenseService's
	// AdsExShopMetric RPC.
	AdsExpenseServiceAdsExShopMetricProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExShopMetric"
	// AdsExpenseServiceAdsExOverviewMetricProcedure is the fully-qualified name of the
	// AdsExpenseService's AdsExOverviewMetric RPC.
	AdsExpenseServiceAdsExOverviewMetricProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExOverviewMetric"
	// AdsExpenseServiceAdsExTimeMetricProcedure is the fully-qualified name of the AdsExpenseService's
	// AdsExTimeMetric RPC.
	AdsExpenseServiceAdsExTimeMetricProcedure = "/accounting_iface.v1.AdsExpenseService/AdsExTimeMetric"
)

// AdsExpenseServiceClient is a client for the accounting_iface.v1.AdsExpenseService service.
type AdsExpenseServiceClient interface {
	AdsExCreate(context.Context, *connect.Request[v1.AdsExCreateRequest]) (*connect.Response[v1.AdsExCreateResponse], error)
	AdsExList(context.Context, *connect.Request[v1.AdsExListRequest]) (*connect.Response[v1.AdsExListResponse], error)
	AdsExEdit(context.Context, *connect.Request[v1.AdsExEditRequest]) (*connect.Response[v1.AdsExEditResponse], error)
	AdsExShopMetric(context.Context, *connect.Request[v1.AdsExShopMetricRequest]) (*connect.Response[v1.AdsExShopMetricResponse], error)
	AdsExOverviewMetric(context.Context, *connect.Request[v1.AdsExOverviewMetricRequest]) (*connect.Response[v1.AdsExOverviewMetricResponse], error)
	AdsExTimeMetric(context.Context, *connect.Request[v1.AdsExTimeMetricRequest]) (*connect.Response[v1.AdsExTimeMetricResponse], error)
}

// NewAdsExpenseServiceClient constructs a client for the accounting_iface.v1.AdsExpenseService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdsExpenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdsExpenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adsExpenseServiceMethods := v1.File_accounting_iface_v1_ads_expense_proto.Services().ByName("AdsExpenseService").Methods()
	return &adsExpenseServiceClient{
		adsExCreate: connect.NewClient[v1.AdsExCreateRequest, v1.AdsExCreateResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExCreateProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExCreate")),
			connect.WithClientOptions(opts...),
		),
		adsExList: connect.NewClient[v1.AdsExListRequest, v1.AdsExListResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExListProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExList")),
			connect.WithClientOptions(opts...),
		),
		adsExEdit: connect.NewClient[v1.AdsExEditRequest, v1.AdsExEditResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExEditProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExEdit")),
			connect.WithClientOptions(opts...),
		),
		adsExShopMetric: connect.NewClient[v1.AdsExShopMetricRequest, v1.AdsExShopMetricResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExShopMetricProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExShopMetric")),
			connect.WithClientOptions(opts...),
		),
		adsExOverviewMetric: connect.NewClient[v1.AdsExOverviewMetricRequest, v1.AdsExOverviewMetricResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExOverviewMetricProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExOverviewMetric")),
			connect.WithClientOptions(opts...),
		),
		adsExTimeMetric: connect.NewClient[v1.AdsExTimeMetricRequest, v1.AdsExTimeMetricResponse](
			httpClient,
			baseURL+AdsExpenseServiceAdsExTimeMetricProcedure,
			connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExTimeMetric")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adsExpenseServiceClient implements AdsExpenseServiceClient.
type adsExpenseServiceClient struct {
	adsExCreate         *connect.Client[v1.AdsExCreateRequest, v1.AdsExCreateResponse]
	adsExList           *connect.Client[v1.AdsExListRequest, v1.AdsExListResponse]
	adsExEdit           *connect.Client[v1.AdsExEditRequest, v1.AdsExEditResponse]
	adsExShopMetric     *connect.Client[v1.AdsExShopMetricRequest, v1.AdsExShopMetricResponse]
	adsExOverviewMetric *connect.Client[v1.AdsExOverviewMetricRequest, v1.AdsExOverviewMetricResponse]
	adsExTimeMetric     *connect.Client[v1.AdsExTimeMetricRequest, v1.AdsExTimeMetricResponse]
}

// AdsExCreate calls accounting_iface.v1.AdsExpenseService.AdsExCreate.
func (c *adsExpenseServiceClient) AdsExCreate(ctx context.Context, req *connect.Request[v1.AdsExCreateRequest]) (*connect.Response[v1.AdsExCreateResponse], error) {
	return c.adsExCreate.CallUnary(ctx, req)
}

// AdsExList calls accounting_iface.v1.AdsExpenseService.AdsExList.
func (c *adsExpenseServiceClient) AdsExList(ctx context.Context, req *connect.Request[v1.AdsExListRequest]) (*connect.Response[v1.AdsExListResponse], error) {
	return c.adsExList.CallUnary(ctx, req)
}

// AdsExEdit calls accounting_iface.v1.AdsExpenseService.AdsExEdit.
func (c *adsExpenseServiceClient) AdsExEdit(ctx context.Context, req *connect.Request[v1.AdsExEditRequest]) (*connect.Response[v1.AdsExEditResponse], error) {
	return c.adsExEdit.CallUnary(ctx, req)
}

// AdsExShopMetric calls accounting_iface.v1.AdsExpenseService.AdsExShopMetric.
func (c *adsExpenseServiceClient) AdsExShopMetric(ctx context.Context, req *connect.Request[v1.AdsExShopMetricRequest]) (*connect.Response[v1.AdsExShopMetricResponse], error) {
	return c.adsExShopMetric.CallUnary(ctx, req)
}

// AdsExOverviewMetric calls accounting_iface.v1.AdsExpenseService.AdsExOverviewMetric.
func (c *adsExpenseServiceClient) AdsExOverviewMetric(ctx context.Context, req *connect.Request[v1.AdsExOverviewMetricRequest]) (*connect.Response[v1.AdsExOverviewMetricResponse], error) {
	return c.adsExOverviewMetric.CallUnary(ctx, req)
}

// AdsExTimeMetric calls accounting_iface.v1.AdsExpenseService.AdsExTimeMetric.
func (c *adsExpenseServiceClient) AdsExTimeMetric(ctx context.Context, req *connect.Request[v1.AdsExTimeMetricRequest]) (*connect.Response[v1.AdsExTimeMetricResponse], error) {
	return c.adsExTimeMetric.CallUnary(ctx, req)
}

// AdsExpenseServiceHandler is an implementation of the accounting_iface.v1.AdsExpenseService
// service.
type AdsExpenseServiceHandler interface {
	AdsExCreate(context.Context, *connect.Request[v1.AdsExCreateRequest]) (*connect.Response[v1.AdsExCreateResponse], error)
	AdsExList(context.Context, *connect.Request[v1.AdsExListRequest]) (*connect.Response[v1.AdsExListResponse], error)
	AdsExEdit(context.Context, *connect.Request[v1.AdsExEditRequest]) (*connect.Response[v1.AdsExEditResponse], error)
	AdsExShopMetric(context.Context, *connect.Request[v1.AdsExShopMetricRequest]) (*connect.Response[v1.AdsExShopMetricResponse], error)
	AdsExOverviewMetric(context.Context, *connect.Request[v1.AdsExOverviewMetricRequest]) (*connect.Response[v1.AdsExOverviewMetricResponse], error)
	AdsExTimeMetric(context.Context, *connect.Request[v1.AdsExTimeMetricRequest]) (*connect.Response[v1.AdsExTimeMetricResponse], error)
}

// NewAdsExpenseServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdsExpenseServiceHandler(svc AdsExpenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adsExpenseServiceMethods := v1.File_accounting_iface_v1_ads_expense_proto.Services().ByName("AdsExpenseService").Methods()
	adsExpenseServiceAdsExCreateHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExCreateProcedure,
		svc.AdsExCreate,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExCreate")),
		connect.WithHandlerOptions(opts...),
	)
	adsExpenseServiceAdsExListHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExListProcedure,
		svc.AdsExList,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExList")),
		connect.WithHandlerOptions(opts...),
	)
	adsExpenseServiceAdsExEditHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExEditProcedure,
		svc.AdsExEdit,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExEdit")),
		connect.WithHandlerOptions(opts...),
	)
	adsExpenseServiceAdsExShopMetricHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExShopMetricProcedure,
		svc.AdsExShopMetric,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExShopMetric")),
		connect.WithHandlerOptions(opts...),
	)
	adsExpenseServiceAdsExOverviewMetricHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExOverviewMetricProcedure,
		svc.AdsExOverviewMetric,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExOverviewMetric")),
		connect.WithHandlerOptions(opts...),
	)
	adsExpenseServiceAdsExTimeMetricHandler := connect.NewUnaryHandler(
		AdsExpenseServiceAdsExTimeMetricProcedure,
		svc.AdsExTimeMetric,
		connect.WithSchema(adsExpenseServiceMethods.ByName("AdsExTimeMetric")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.AdsExpenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdsExpenseServiceAdsExCreateProcedure:
			adsExpenseServiceAdsExCreateHandler.ServeHTTP(w, r)
		case AdsExpenseServiceAdsExListProcedure:
			adsExpenseServiceAdsExListHandler.ServeHTTP(w, r)
		case AdsExpenseServiceAdsExEditProcedure:
			adsExpenseServiceAdsExEditHandler.ServeHTTP(w, r)
		case AdsExpenseServiceAdsExShopMetricProcedure:
			adsExpenseServiceAdsExShopMetricHandler.ServeHTTP(w, r)
		case AdsExpenseServiceAdsExOverviewMetricProcedure:
			adsExpenseServiceAdsExOverviewMetricHandler.ServeHTTP(w, r)
		case AdsExpenseServiceAdsExTimeMetricProcedure:
			adsExpenseServiceAdsExTimeMetricHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdsExpenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdsExpenseServiceHandler struct{}

func (UnimplementedAdsExpenseServiceHandler) AdsExCreate(context.Context, *connect.Request[v1.AdsExCreateRequest]) (*connect.Response[v1.AdsExCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExCreate is not implemented"))
}

func (UnimplementedAdsExpenseServiceHandler) AdsExList(context.Context, *connect.Request[v1.AdsExListRequest]) (*connect.Response[v1.AdsExListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExList is not implemented"))
}

func (UnimplementedAdsExpenseServiceHandler) AdsExEdit(context.Context, *connect.Request[v1.AdsExEditRequest]) (*connect.Response[v1.AdsExEditResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExEdit is not implemented"))
}

func (UnimplementedAdsExpenseServiceHandler) AdsExShopMetric(context.Context, *connect.Request[v1.AdsExShopMetricRequest]) (*connect.Response[v1.AdsExShopMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExShopMetric is not implemented"))
}

func (UnimplementedAdsExpenseServiceHandler) AdsExOverviewMetric(context.Context, *connect.Request[v1.AdsExOverviewMetricRequest]) (*connect.Response[v1.AdsExOverviewMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExOverviewMetric is not implemented"))
}

func (UnimplementedAdsExpenseServiceHandler) AdsExTimeMetric(context.Context, *connect.Request[v1.AdsExTimeMetricRequest]) (*connect.Response[v1.AdsExTimeMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AdsExpenseService.AdsExTimeMetric is not implemented"))
}
