// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounting_iface/v1/expense.proto

package accounting_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/accounting_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExpenseServiceName is the fully-qualified name of the ExpenseService service.
	ExpenseServiceName = "accounting_iface.v1.ExpenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExpenseServiceExpenseCreateProcedure is the fully-qualified name of the ExpenseService's
	// ExpenseCreate RPC.
	ExpenseServiceExpenseCreateProcedure = "/accounting_iface.v1.ExpenseService/ExpenseCreate"
	// ExpenseServiceExpenseListProcedure is the fully-qualified name of the ExpenseService's
	// ExpenseList RPC.
	ExpenseServiceExpenseListProcedure = "/accounting_iface.v1.ExpenseService/ExpenseList"
	// ExpenseServiceExpenseTypeListProcedure is the fully-qualified name of the ExpenseService's
	// ExpenseTypeList RPC.
	ExpenseServiceExpenseTypeListProcedure = "/accounting_iface.v1.ExpenseService/ExpenseTypeList"
	// ExpenseServiceExpenseOverviewMetricProcedure is the fully-qualified name of the ExpenseService's
	// ExpenseOverviewMetric RPC.
	ExpenseServiceExpenseOverviewMetricProcedure = "/accounting_iface.v1.ExpenseService/ExpenseOverviewMetric"
	// ExpenseServiceExpenseTimeMetricProcedure is the fully-qualified name of the ExpenseService's
	// ExpenseTimeMetric RPC.
	ExpenseServiceExpenseTimeMetricProcedure = "/accounting_iface.v1.ExpenseService/ExpenseTimeMetric"
)

// ExpenseServiceClient is a client for the accounting_iface.v1.ExpenseService service.
type ExpenseServiceClient interface {
	ExpenseCreate(context.Context, *connect.Request[v1.ExpenseCreateRequest]) (*connect.Response[v1.ExpenseCreateResponse], error)
	ExpenseList(context.Context, *connect.Request[v1.ExpenseListRequest]) (*connect.Response[v1.ExpenseListResponse], error)
	ExpenseTypeList(context.Context, *connect.Request[v1.ExpenseTypeListRequest]) (*connect.Response[v1.ExpenseTypeListResponse], error)
	// #### Untuk Metric Overview
	ExpenseOverviewMetric(context.Context, *connect.Request[v1.ExpenseOverviewMetricRequest]) (*connect.Response[v1.ExpenseOverviewMetricResponse], error)
	// #### Untuk Metric berdasarkan waktu
	// contoh ketika pengen metric expense daily, monthly dak kawan kawan
	ExpenseTimeMetric(context.Context, *connect.Request[v1.ExpenseTimeMetricRequest]) (*connect.Response[v1.ExpenseTimeMetricResponse], error)
}

// NewExpenseServiceClient constructs a client for the accounting_iface.v1.ExpenseService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExpenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExpenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	expenseServiceMethods := v1.File_accounting_iface_v1_expense_proto.Services().ByName("ExpenseService").Methods()
	return &expenseServiceClient{
		expenseCreate: connect.NewClient[v1.ExpenseCreateRequest, v1.ExpenseCreateResponse](
			httpClient,
			baseURL+ExpenseServiceExpenseCreateProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ExpenseCreate")),
			connect.WithClientOptions(opts...),
		),
		expenseList: connect.NewClient[v1.ExpenseListRequest, v1.ExpenseListResponse](
			httpClient,
			baseURL+ExpenseServiceExpenseListProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ExpenseList")),
			connect.WithClientOptions(opts...),
		),
		expenseTypeList: connect.NewClient[v1.ExpenseTypeListRequest, v1.ExpenseTypeListResponse](
			httpClient,
			baseURL+ExpenseServiceExpenseTypeListProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ExpenseTypeList")),
			connect.WithClientOptions(opts...),
		),
		expenseOverviewMetric: connect.NewClient[v1.ExpenseOverviewMetricRequest, v1.ExpenseOverviewMetricResponse](
			httpClient,
			baseURL+ExpenseServiceExpenseOverviewMetricProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ExpenseOverviewMetric")),
			connect.WithClientOptions(opts...),
		),
		expenseTimeMetric: connect.NewClient[v1.ExpenseTimeMetricRequest, v1.ExpenseTimeMetricResponse](
			httpClient,
			baseURL+ExpenseServiceExpenseTimeMetricProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ExpenseTimeMetric")),
			connect.WithClientOptions(opts...),
		),
	}
}

// expenseServiceClient implements ExpenseServiceClient.
type expenseServiceClient struct {
	expenseCreate         *connect.Client[v1.ExpenseCreateRequest, v1.ExpenseCreateResponse]
	expenseList           *connect.Client[v1.ExpenseListRequest, v1.ExpenseListResponse]
	expenseTypeList       *connect.Client[v1.ExpenseTypeListRequest, v1.ExpenseTypeListResponse]
	expenseOverviewMetric *connect.Client[v1.ExpenseOverviewMetricRequest, v1.ExpenseOverviewMetricResponse]
	expenseTimeMetric     *connect.Client[v1.ExpenseTimeMetricRequest, v1.ExpenseTimeMetricResponse]
}

// ExpenseCreate calls accounting_iface.v1.ExpenseService.ExpenseCreate.
func (c *expenseServiceClient) ExpenseCreate(ctx context.Context, req *connect.Request[v1.ExpenseCreateRequest]) (*connect.Response[v1.ExpenseCreateResponse], error) {
	return c.expenseCreate.CallUnary(ctx, req)
}

// ExpenseList calls accounting_iface.v1.ExpenseService.ExpenseList.
func (c *expenseServiceClient) ExpenseList(ctx context.Context, req *connect.Request[v1.ExpenseListRequest]) (*connect.Response[v1.ExpenseListResponse], error) {
	return c.expenseList.CallUnary(ctx, req)
}

// ExpenseTypeList calls accounting_iface.v1.ExpenseService.ExpenseTypeList.
func (c *expenseServiceClient) ExpenseTypeList(ctx context.Context, req *connect.Request[v1.ExpenseTypeListRequest]) (*connect.Response[v1.ExpenseTypeListResponse], error) {
	return c.expenseTypeList.CallUnary(ctx, req)
}

// ExpenseOverviewMetric calls accounting_iface.v1.ExpenseService.ExpenseOverviewMetric.
func (c *expenseServiceClient) ExpenseOverviewMetric(ctx context.Context, req *connect.Request[v1.ExpenseOverviewMetricRequest]) (*connect.Response[v1.ExpenseOverviewMetricResponse], error) {
	return c.expenseOverviewMetric.CallUnary(ctx, req)
}

// ExpenseTimeMetric calls accounting_iface.v1.ExpenseService.ExpenseTimeMetric.
func (c *expenseServiceClient) ExpenseTimeMetric(ctx context.Context, req *connect.Request[v1.ExpenseTimeMetricRequest]) (*connect.Response[v1.ExpenseTimeMetricResponse], error) {
	return c.expenseTimeMetric.CallUnary(ctx, req)
}

// ExpenseServiceHandler is an implementation of the accounting_iface.v1.ExpenseService service.
type ExpenseServiceHandler interface {
	ExpenseCreate(context.Context, *connect.Request[v1.ExpenseCreateRequest]) (*connect.Response[v1.ExpenseCreateResponse], error)
	ExpenseList(context.Context, *connect.Request[v1.ExpenseListRequest]) (*connect.Response[v1.ExpenseListResponse], error)
	ExpenseTypeList(context.Context, *connect.Request[v1.ExpenseTypeListRequest]) (*connect.Response[v1.ExpenseTypeListResponse], error)
	// #### Untuk Metric Overview
	ExpenseOverviewMetric(context.Context, *connect.Request[v1.ExpenseOverviewMetricRequest]) (*connect.Response[v1.ExpenseOverviewMetricResponse], error)
	// #### Untuk Metric berdasarkan waktu
	// contoh ketika pengen metric expense daily, monthly dak kawan kawan
	ExpenseTimeMetric(context.Context, *connect.Request[v1.ExpenseTimeMetricRequest]) (*connect.Response[v1.ExpenseTimeMetricResponse], error)
}

// NewExpenseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExpenseServiceHandler(svc ExpenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	expenseServiceMethods := v1.File_accounting_iface_v1_expense_proto.Services().ByName("ExpenseService").Methods()
	expenseServiceExpenseCreateHandler := connect.NewUnaryHandler(
		ExpenseServiceExpenseCreateProcedure,
		svc.ExpenseCreate,
		connect.WithSchema(expenseServiceMethods.ByName("ExpenseCreate")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceExpenseListHandler := connect.NewUnaryHandler(
		ExpenseServiceExpenseListProcedure,
		svc.ExpenseList,
		connect.WithSchema(expenseServiceMethods.ByName("ExpenseList")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceExpenseTypeListHandler := connect.NewUnaryHandler(
		ExpenseServiceExpenseTypeListProcedure,
		svc.ExpenseTypeList,
		connect.WithSchema(expenseServiceMethods.ByName("ExpenseTypeList")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceExpenseOverviewMetricHandler := connect.NewUnaryHandler(
		ExpenseServiceExpenseOverviewMetricProcedure,
		svc.ExpenseOverviewMetric,
		connect.WithSchema(expenseServiceMethods.ByName("ExpenseOverviewMetric")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceExpenseTimeMetricHandler := connect.NewUnaryHandler(
		ExpenseServiceExpenseTimeMetricProcedure,
		svc.ExpenseTimeMetric,
		connect.WithSchema(expenseServiceMethods.ByName("ExpenseTimeMetric")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.ExpenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExpenseServiceExpenseCreateProcedure:
			expenseServiceExpenseCreateHandler.ServeHTTP(w, r)
		case ExpenseServiceExpenseListProcedure:
			expenseServiceExpenseListHandler.ServeHTTP(w, r)
		case ExpenseServiceExpenseTypeListProcedure:
			expenseServiceExpenseTypeListHandler.ServeHTTP(w, r)
		case ExpenseServiceExpenseOverviewMetricProcedure:
			expenseServiceExpenseOverviewMetricHandler.ServeHTTP(w, r)
		case ExpenseServiceExpenseTimeMetricProcedure:
			expenseServiceExpenseTimeMetricHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExpenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExpenseServiceHandler struct{}

func (UnimplementedExpenseServiceHandler) ExpenseCreate(context.Context, *connect.Request[v1.ExpenseCreateRequest]) (*connect.Response[v1.ExpenseCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.ExpenseService.ExpenseCreate is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ExpenseList(context.Context, *connect.Request[v1.ExpenseListRequest]) (*connect.Response[v1.ExpenseListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.ExpenseService.ExpenseList is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ExpenseTypeList(context.Context, *connect.Request[v1.ExpenseTypeListRequest]) (*connect.Response[v1.ExpenseTypeListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.ExpenseService.ExpenseTypeList is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ExpenseOverviewMetric(context.Context, *connect.Request[v1.ExpenseOverviewMetricRequest]) (*connect.Response[v1.ExpenseOverviewMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.ExpenseService.ExpenseOverviewMetric is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ExpenseTimeMetric(context.Context, *connect.Request[v1.ExpenseTimeMetricRequest]) (*connect.Response[v1.ExpenseTimeMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.ExpenseService.ExpenseTimeMetric is not implemented"))
}
