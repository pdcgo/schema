// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounting_iface/v1/setup.proto

package accounting_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/accounting_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountingSetupServiceName is the fully-qualified name of the AccountingSetupService service.
	AccountingSetupServiceName = "accounting_iface.v1.AccountingSetupService"
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "accounting_iface.v1.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountingSetupServiceSetupProcedure is the fully-qualified name of the AccountingSetupService's
	// Setup RPC.
	AccountingSetupServiceSetupProcedure = "/accounting_iface.v1.AccountingSetupService/Setup"
	// StreamServiceDummyStreamProcedure is the fully-qualified name of the StreamService's DummyStream
	// RPC.
	StreamServiceDummyStreamProcedure = "/accounting_iface.v1.StreamService/DummyStream"
)

// AccountingSetupServiceClient is a client for the accounting_iface.v1.AccountingSetupService
// service.
type AccountingSetupServiceClient interface {
	Setup(context.Context, *connect.Request[v1.SetupRequest]) (*connect.ServerStreamForClient[v1.SetupResponse], error)
}

// NewAccountingSetupServiceClient constructs a client for the
// accounting_iface.v1.AccountingSetupService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountingSetupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountingSetupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountingSetupServiceMethods := v1.File_accounting_iface_v1_setup_proto.Services().ByName("AccountingSetupService").Methods()
	return &accountingSetupServiceClient{
		setup: connect.NewClient[v1.SetupRequest, v1.SetupResponse](
			httpClient,
			baseURL+AccountingSetupServiceSetupProcedure,
			connect.WithSchema(accountingSetupServiceMethods.ByName("Setup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountingSetupServiceClient implements AccountingSetupServiceClient.
type accountingSetupServiceClient struct {
	setup *connect.Client[v1.SetupRequest, v1.SetupResponse]
}

// Setup calls accounting_iface.v1.AccountingSetupService.Setup.
func (c *accountingSetupServiceClient) Setup(ctx context.Context, req *connect.Request[v1.SetupRequest]) (*connect.ServerStreamForClient[v1.SetupResponse], error) {
	return c.setup.CallServerStream(ctx, req)
}

// AccountingSetupServiceHandler is an implementation of the
// accounting_iface.v1.AccountingSetupService service.
type AccountingSetupServiceHandler interface {
	Setup(context.Context, *connect.Request[v1.SetupRequest], *connect.ServerStream[v1.SetupResponse]) error
}

// NewAccountingSetupServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountingSetupServiceHandler(svc AccountingSetupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountingSetupServiceMethods := v1.File_accounting_iface_v1_setup_proto.Services().ByName("AccountingSetupService").Methods()
	accountingSetupServiceSetupHandler := connect.NewServerStreamHandler(
		AccountingSetupServiceSetupProcedure,
		svc.Setup,
		connect.WithSchema(accountingSetupServiceMethods.ByName("Setup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.AccountingSetupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountingSetupServiceSetupProcedure:
			accountingSetupServiceSetupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountingSetupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountingSetupServiceHandler struct{}

func (UnimplementedAccountingSetupServiceHandler) Setup(context.Context, *connect.Request[v1.SetupRequest], *connect.ServerStream[v1.SetupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.AccountingSetupService.Setup is not implemented"))
}

// StreamServiceClient is a client for the accounting_iface.v1.StreamService service.
type StreamServiceClient interface {
	DummyStream(context.Context) *connect.BidiStreamForClient[v1.DummyStreamRequest, v1.DummyStreamResponse]
}

// NewStreamServiceClient constructs a client for the accounting_iface.v1.StreamService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	streamServiceMethods := v1.File_accounting_iface_v1_setup_proto.Services().ByName("StreamService").Methods()
	return &streamServiceClient{
		dummyStream: connect.NewClient[v1.DummyStreamRequest, v1.DummyStreamResponse](
			httpClient,
			baseURL+StreamServiceDummyStreamProcedure,
			connect.WithSchema(streamServiceMethods.ByName("DummyStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	dummyStream *connect.Client[v1.DummyStreamRequest, v1.DummyStreamResponse]
}

// DummyStream calls accounting_iface.v1.StreamService.DummyStream.
func (c *streamServiceClient) DummyStream(ctx context.Context) *connect.BidiStreamForClient[v1.DummyStreamRequest, v1.DummyStreamResponse] {
	return c.dummyStream.CallBidiStream(ctx)
}

// StreamServiceHandler is an implementation of the accounting_iface.v1.StreamService service.
type StreamServiceHandler interface {
	DummyStream(context.Context, *connect.BidiStream[v1.DummyStreamRequest, v1.DummyStreamResponse]) error
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamServiceMethods := v1.File_accounting_iface_v1_setup_proto.Services().ByName("StreamService").Methods()
	streamServiceDummyStreamHandler := connect.NewBidiStreamHandler(
		StreamServiceDummyStreamProcedure,
		svc.DummyStream,
		connect.WithSchema(streamServiceMethods.ByName("DummyStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.StreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamServiceDummyStreamProcedure:
			streamServiceDummyStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) DummyStream(context.Context, *connect.BidiStream[v1.DummyStreamRequest, v1.DummyStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.StreamService.DummyStream is not implemented"))
}
