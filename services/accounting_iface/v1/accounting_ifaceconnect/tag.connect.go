// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounting_iface/v1/tag.proto

package accounting_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/accounting_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "accounting_iface.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagServiceTagCreateProcedure is the fully-qualified name of the TagService's TagCreate RPC.
	TagServiceTagCreateProcedure = "/accounting_iface.v1.TagService/TagCreate"
	// TagServiceTagListProcedure is the fully-qualified name of the TagService's TagList RPC.
	TagServiceTagListProcedure = "/accounting_iface.v1.TagService/TagList"
	// TagServiceTagIDsProcedure is the fully-qualified name of the TagService's TagIDs RPC.
	TagServiceTagIDsProcedure = "/accounting_iface.v1.TagService/TagIDs"
)

// TagServiceClient is a client for the accounting_iface.v1.TagService service.
type TagServiceClient interface {
	TagCreate(context.Context, *connect.Request[v1.TagCreateRequest]) (*connect.Response[v1.TagCreateResponse], error)
	TagList(context.Context, *connect.Request[v1.TagListRequest]) (*connect.Response[v1.TagListResponse], error)
	TagIDs(context.Context, *connect.Request[v1.TagIDsRequest]) (*connect.Response[v1.TagIDsResponse], error)
}

// NewTagServiceClient constructs a client for the accounting_iface.v1.TagService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := v1.File_accounting_iface_v1_tag_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		tagCreate: connect.NewClient[v1.TagCreateRequest, v1.TagCreateResponse](
			httpClient,
			baseURL+TagServiceTagCreateProcedure,
			connect.WithSchema(tagServiceMethods.ByName("TagCreate")),
			connect.WithClientOptions(opts...),
		),
		tagList: connect.NewClient[v1.TagListRequest, v1.TagListResponse](
			httpClient,
			baseURL+TagServiceTagListProcedure,
			connect.WithSchema(tagServiceMethods.ByName("TagList")),
			connect.WithClientOptions(opts...),
		),
		tagIDs: connect.NewClient[v1.TagIDsRequest, v1.TagIDsResponse](
			httpClient,
			baseURL+TagServiceTagIDsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("TagIDs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	tagCreate *connect.Client[v1.TagCreateRequest, v1.TagCreateResponse]
	tagList   *connect.Client[v1.TagListRequest, v1.TagListResponse]
	tagIDs    *connect.Client[v1.TagIDsRequest, v1.TagIDsResponse]
}

// TagCreate calls accounting_iface.v1.TagService.TagCreate.
func (c *tagServiceClient) TagCreate(ctx context.Context, req *connect.Request[v1.TagCreateRequest]) (*connect.Response[v1.TagCreateResponse], error) {
	return c.tagCreate.CallUnary(ctx, req)
}

// TagList calls accounting_iface.v1.TagService.TagList.
func (c *tagServiceClient) TagList(ctx context.Context, req *connect.Request[v1.TagListRequest]) (*connect.Response[v1.TagListResponse], error) {
	return c.tagList.CallUnary(ctx, req)
}

// TagIDs calls accounting_iface.v1.TagService.TagIDs.
func (c *tagServiceClient) TagIDs(ctx context.Context, req *connect.Request[v1.TagIDsRequest]) (*connect.Response[v1.TagIDsResponse], error) {
	return c.tagIDs.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the accounting_iface.v1.TagService service.
type TagServiceHandler interface {
	TagCreate(context.Context, *connect.Request[v1.TagCreateRequest]) (*connect.Response[v1.TagCreateResponse], error)
	TagList(context.Context, *connect.Request[v1.TagListRequest]) (*connect.Response[v1.TagListResponse], error)
	TagIDs(context.Context, *connect.Request[v1.TagIDsRequest]) (*connect.Response[v1.TagIDsResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := v1.File_accounting_iface_v1_tag_proto.Services().ByName("TagService").Methods()
	tagServiceTagCreateHandler := connect.NewUnaryHandler(
		TagServiceTagCreateProcedure,
		svc.TagCreate,
		connect.WithSchema(tagServiceMethods.ByName("TagCreate")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceTagListHandler := connect.NewUnaryHandler(
		TagServiceTagListProcedure,
		svc.TagList,
		connect.WithSchema(tagServiceMethods.ByName("TagList")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceTagIDsHandler := connect.NewUnaryHandler(
		TagServiceTagIDsProcedure,
		svc.TagIDs,
		connect.WithSchema(tagServiceMethods.ByName("TagIDs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounting_iface.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceTagCreateProcedure:
			tagServiceTagCreateHandler.ServeHTTP(w, r)
		case TagServiceTagListProcedure:
			tagServiceTagListHandler.ServeHTTP(w, r)
		case TagServiceTagIDsProcedure:
			tagServiceTagIDsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) TagCreate(context.Context, *connect.Request[v1.TagCreateRequest]) (*connect.Response[v1.TagCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.TagService.TagCreate is not implemented"))
}

func (UnimplementedTagServiceHandler) TagList(context.Context, *connect.Request[v1.TagListRequest]) (*connect.Response[v1.TagListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.TagService.TagList is not implemented"))
}

func (UnimplementedTagServiceHandler) TagIDs(context.Context, *connect.Request[v1.TagIDsRequest]) (*connect.Response[v1.TagIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounting_iface.v1.TagService.TagIDs is not implemented"))
}
