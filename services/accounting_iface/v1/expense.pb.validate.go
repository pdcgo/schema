// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_iface/v1/expense.proto

package accounting_iface

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/pdcgo/schema/services/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.TimeType(0)
)

// Validate checks the field values on KeyValueMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyValueMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyValueMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyValueMetricMultiError,
// or nil if none found.
func (m *KeyValueMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyValueMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KeyValueMetricMultiError(errors)
	}

	return nil
}

// KeyValueMetricMultiError is an error wrapping multiple validation errors
// returned by KeyValueMetric.ValidateAll() if the designated constraints
// aren't met.
type KeyValueMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyValueMetricMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyValueMetricMultiError) AllErrors() []error { return m }

// KeyValueMetricValidationError is the validation error returned by
// KeyValueMetric.Validate if the designated constraints aren't met.
type KeyValueMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValueMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValueMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValueMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValueMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValueMetricValidationError) ErrorName() string { return "KeyValueMetricValidationError" }

// Error satisfies the builtin error interface
func (e KeyValueMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValueMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValueMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValueMetricValidationError{}

// Validate checks the field values on KeyValueMetricList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KeyValueMetricList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyValueMetricList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KeyValueMetricListMultiError, or nil if none found.
func (m *KeyValueMetricList) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyValueMetricList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KeyValueMetricListValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KeyValueMetricListValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KeyValueMetricListValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return KeyValueMetricListMultiError(errors)
	}

	return nil
}

// KeyValueMetricListMultiError is an error wrapping multiple validation errors
// returned by KeyValueMetricList.ValidateAll() if the designated constraints
// aren't met.
type KeyValueMetricListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyValueMetricListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyValueMetricListMultiError) AllErrors() []error { return m }

// KeyValueMetricListValidationError is the validation error returned by
// KeyValueMetricList.Validate if the designated constraints aren't met.
type KeyValueMetricListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValueMetricListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValueMetricListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValueMetricListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValueMetricListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValueMetricListValidationError) ErrorName() string {
	return "KeyValueMetricListValidationError"
}

// Error satisfies the builtin error interface
func (e KeyValueMetricListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValueMetricList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValueMetricListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValueMetricListValidationError{}

// Validate checks the field values on ExpenseTimeMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseTimeMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseTimeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseTimeMetricRequestMultiError, or nil if none found.
func (m *ExpenseTimeMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseTimeMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for ExpenseKey

	// no validation rules for TimeType

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpenseTimeMetricRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpenseTimeMetricRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpenseTimeMetricRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpenseTimeMetricRequestMultiError(errors)
	}

	return nil
}

// ExpenseTimeMetricRequestMultiError is an error wrapping multiple validation
// errors returned by ExpenseTimeMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpenseTimeMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseTimeMetricRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseTimeMetricRequestMultiError) AllErrors() []error { return m }

// ExpenseTimeMetricRequestValidationError is the validation error returned by
// ExpenseTimeMetricRequest.Validate if the designated constraints aren't met.
type ExpenseTimeMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseTimeMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseTimeMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseTimeMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseTimeMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseTimeMetricRequestValidationError) ErrorName() string {
	return "ExpenseTimeMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseTimeMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseTimeMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseTimeMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseTimeMetricRequestValidationError{}

// Validate checks the field values on ExpenseTimeMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseTimeMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseTimeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseTimeMetricResponseMultiError, or nil if none found.
func (m *ExpenseTimeMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseTimeMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpenseTotal

	{
		sorted_keys := make([]int64, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExpenseTimeMetricResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExpenseTimeMetricResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExpenseTimeMetricResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ExpenseTimeMetricResponseMultiError(errors)
	}

	return nil
}

// ExpenseTimeMetricResponseMultiError is an error wrapping multiple validation
// errors returned by ExpenseTimeMetricResponse.ValidateAll() if the
// designated constraints aren't met.
type ExpenseTimeMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseTimeMetricResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseTimeMetricResponseMultiError) AllErrors() []error { return m }

// ExpenseTimeMetricResponseValidationError is the validation error returned by
// ExpenseTimeMetricResponse.Validate if the designated constraints aren't met.
type ExpenseTimeMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseTimeMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseTimeMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseTimeMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseTimeMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseTimeMetricResponseValidationError) ErrorName() string {
	return "ExpenseTimeMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseTimeMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseTimeMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseTimeMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseTimeMetricResponseValidationError{}

// Validate checks the field values on ExpenseOverviewMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseOverviewMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseOverviewMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseOverviewMetricRequestMultiError, or nil if none found.
func (m *ExpenseOverviewMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseOverviewMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpenseOverviewMetricRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpenseOverviewMetricRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpenseOverviewMetricRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpenseOverviewMetricRequestMultiError(errors)
	}

	return nil
}

// ExpenseOverviewMetricRequestMultiError is an error wrapping multiple
// validation errors returned by ExpenseOverviewMetricRequest.ValidateAll() if
// the designated constraints aren't met.
type ExpenseOverviewMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseOverviewMetricRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseOverviewMetricRequestMultiError) AllErrors() []error { return m }

// ExpenseOverviewMetricRequestValidationError is the validation error returned
// by ExpenseOverviewMetricRequest.Validate if the designated constraints
// aren't met.
type ExpenseOverviewMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseOverviewMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseOverviewMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseOverviewMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseOverviewMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseOverviewMetricRequestValidationError) ErrorName() string {
	return "ExpenseOverviewMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseOverviewMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseOverviewMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseOverviewMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseOverviewMetricRequestValidationError{}

// Validate checks the field values on ExpenseOverviewMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseOverviewMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseOverviewMetricResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExpenseOverviewMetricResponseMultiError, or nil if none found.
func (m *ExpenseOverviewMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseOverviewMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpenseTotal

	// no validation rules for ExpenseDetails

	if len(errors) > 0 {
		return ExpenseOverviewMetricResponseMultiError(errors)
	}

	return nil
}

// ExpenseOverviewMetricResponseMultiError is an error wrapping multiple
// validation errors returned by ExpenseOverviewMetricResponse.ValidateAll()
// if the designated constraints aren't met.
type ExpenseOverviewMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseOverviewMetricResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseOverviewMetricResponseMultiError) AllErrors() []error { return m }

// ExpenseOverviewMetricResponseValidationError is the validation error
// returned by ExpenseOverviewMetricResponse.Validate if the designated
// constraints aren't met.
type ExpenseOverviewMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseOverviewMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseOverviewMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseOverviewMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseOverviewMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseOverviewMetricResponseValidationError) ErrorName() string {
	return "ExpenseOverviewMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseOverviewMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseOverviewMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseOverviewMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseOverviewMetricResponseValidationError{}

// Validate checks the field values on ExpenseSetupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseSetupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseSetupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseSetupRequestMultiError, or nil if none found.
func (m *ExpenseSetupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseSetupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return ExpenseSetupRequestMultiError(errors)
	}

	return nil
}

// ExpenseSetupRequestMultiError is an error wrapping multiple validation
// errors returned by ExpenseSetupRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpenseSetupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseSetupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseSetupRequestMultiError) AllErrors() []error { return m }

// ExpenseSetupRequestValidationError is the validation error returned by
// ExpenseSetupRequest.Validate if the designated constraints aren't met.
type ExpenseSetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseSetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseSetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseSetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseSetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseSetupRequestValidationError) ErrorName() string {
	return "ExpenseSetupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseSetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseSetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseSetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseSetupRequestValidationError{}

// Validate checks the field values on ExpenseSetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseSetupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseSetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseSetupResponseMultiError, or nil if none found.
func (m *ExpenseSetupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseSetupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ExpenseSetupResponseMultiError(errors)
	}

	return nil
}

// ExpenseSetupResponseMultiError is an error wrapping multiple validation
// errors returned by ExpenseSetupResponse.ValidateAll() if the designated
// constraints aren't met.
type ExpenseSetupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseSetupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseSetupResponseMultiError) AllErrors() []error { return m }

// ExpenseSetupResponseValidationError is the validation error returned by
// ExpenseSetupResponse.Validate if the designated constraints aren't met.
type ExpenseSetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseSetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseSetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseSetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseSetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseSetupResponseValidationError) ErrorName() string {
	return "ExpenseSetupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseSetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseSetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseSetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseSetupResponseValidationError{}

// Validate checks the field values on ExpenseTypeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseTypeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseTypeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseTypeListRequestMultiError, or nil if none found.
func (m *ExpenseTypeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseTypeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return ExpenseTypeListRequestMultiError(errors)
	}

	return nil
}

// ExpenseTypeListRequestMultiError is an error wrapping multiple validation
// errors returned by ExpenseTypeListRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpenseTypeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseTypeListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseTypeListRequestMultiError) AllErrors() []error { return m }

// ExpenseTypeListRequestValidationError is the validation error returned by
// ExpenseTypeListRequest.Validate if the designated constraints aren't met.
type ExpenseTypeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseTypeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseTypeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseTypeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseTypeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseTypeListRequestValidationError) ErrorName() string {
	return "ExpenseTypeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseTypeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseTypeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseTypeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseTypeListRequestValidationError{}

// Validate checks the field values on ExpenseTypeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseTypeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseTypeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseTypeListResponseMultiError, or nil if none found.
func (m *ExpenseTypeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseTypeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpenseTypeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpenseTypeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpenseTypeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExpenseTypeListResponseMultiError(errors)
	}

	return nil
}

// ExpenseTypeListResponseMultiError is an error wrapping multiple validation
// errors returned by ExpenseTypeListResponse.ValidateAll() if the designated
// constraints aren't met.
type ExpenseTypeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseTypeListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseTypeListResponseMultiError) AllErrors() []error { return m }

// ExpenseTypeListResponseValidationError is the validation error returned by
// ExpenseTypeListResponse.Validate if the designated constraints aren't met.
type ExpenseTypeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseTypeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseTypeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseTypeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseTypeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseTypeListResponseValidationError) ErrorName() string {
	return "ExpenseTypeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseTypeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseTypeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseTypeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseTypeListResponseValidationError{}

// Validate checks the field values on ExpenseItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpenseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpenseItemMultiError, or
// nil if none found.
func (m *ExpenseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TeamId

	// no validation rules for CreatedById

	// no validation rules for Desc

	// no validation rules for ExpenseType

	// no validation rules for Amount

	// no validation rules for ExpenseAt

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ExpenseItemMultiError(errors)
	}

	return nil
}

// ExpenseItemMultiError is an error wrapping multiple validation errors
// returned by ExpenseItem.ValidateAll() if the designated constraints aren't met.
type ExpenseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseItemMultiError) AllErrors() []error { return m }

// ExpenseItemValidationError is the validation error returned by
// ExpenseItem.Validate if the designated constraints aren't met.
type ExpenseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseItemValidationError) ErrorName() string { return "ExpenseItemValidationError" }

// Error satisfies the builtin error interface
func (e ExpenseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseItemValidationError{}

// Validate checks the field values on ExpenseCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseCreateRequestMultiError, or nil if none found.
func (m *ExpenseCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for RefId

	// no validation rules for Desc

	// no validation rules for ExpenseType

	// no validation rules for ExpenseKey

	// no validation rules for Amount

	// no validation rules for ExpenseAt

	if len(errors) > 0 {
		return ExpenseCreateRequestMultiError(errors)
	}

	return nil
}

// ExpenseCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ExpenseCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpenseCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseCreateRequestMultiError) AllErrors() []error { return m }

// ExpenseCreateRequestValidationError is the validation error returned by
// ExpenseCreateRequest.Validate if the designated constraints aren't met.
type ExpenseCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseCreateRequestValidationError) ErrorName() string {
	return "ExpenseCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseCreateRequestValidationError{}

// Validate checks the field values on ExpenseCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseCreateResponseMultiError, or nil if none found.
func (m *ExpenseCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ExpenseCreateResponseMultiError(errors)
	}

	return nil
}

// ExpenseCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ExpenseCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ExpenseCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseCreateResponseMultiError) AllErrors() []error { return m }

// ExpenseCreateResponseValidationError is the validation error returned by
// ExpenseCreateResponse.Validate if the designated constraints aren't met.
type ExpenseCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseCreateResponseValidationError) ErrorName() string {
	return "ExpenseCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseCreateResponseValidationError{}

// Validate checks the field values on ExpenseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseListRequestMultiError, or nil if none found.
func (m *ExpenseListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for ByUserId

	// no validation rules for ExpenseType

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpenseListRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpenseListRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpenseListRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpenseListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpenseListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpenseListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpenseListRequestMultiError(errors)
	}

	return nil
}

// ExpenseListRequestMultiError is an error wrapping multiple validation errors
// returned by ExpenseListRequest.ValidateAll() if the designated constraints
// aren't met.
type ExpenseListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseListRequestMultiError) AllErrors() []error { return m }

// ExpenseListRequestValidationError is the validation error returned by
// ExpenseListRequest.Validate if the designated constraints aren't met.
type ExpenseListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseListRequestValidationError) ErrorName() string {
	return "ExpenseListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseListRequestValidationError{}

// Validate checks the field values on ExpenseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExpenseListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpenseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExpenseListResponseMultiError, or nil if none found.
func (m *ExpenseListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpenseListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpenseListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpenseListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpenseListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpenseListResponseValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpenseListResponseValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpenseListResponseValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpenseListResponseMultiError(errors)
	}

	return nil
}

// ExpenseListResponseMultiError is an error wrapping multiple validation
// errors returned by ExpenseListResponse.ValidateAll() if the designated
// constraints aren't met.
type ExpenseListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpenseListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpenseListResponseMultiError) AllErrors() []error { return m }

// ExpenseListResponseValidationError is the validation error returned by
// ExpenseListResponse.Validate if the designated constraints aren't met.
type ExpenseListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpenseListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpenseListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpenseListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpenseListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpenseListResponseValidationError) ErrorName() string {
	return "ExpenseListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpenseListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpenseListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpenseListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpenseListResponseValidationError{}
