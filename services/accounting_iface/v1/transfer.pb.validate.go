// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_iface/v1/transfer.proto

package accounting_iface

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransferAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransferAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccountMultiError, or nil if none found.
func (m *TransferAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for NumberId

	if len(errors) > 0 {
		return TransferAccountMultiError(errors)
	}

	return nil
}

// TransferAccountMultiError is an error wrapping multiple validation errors
// returned by TransferAccount.ValidateAll() if the designated constraints
// aren't met.
type TransferAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccountMultiError) AllErrors() []error { return m }

// TransferAccountValidationError is the validation error returned by
// TransferAccount.Validate if the designated constraints aren't met.
type TransferAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccountValidationError) ErrorName() string { return "TransferAccountValidationError" }

// Error satisfies the builtin error interface
func (e TransferAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccountValidationError{}

// Validate checks the field values on TransferAccountListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferAccountListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccountListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccountListRequestMultiError, or nil if none found.
func (m *TransferAccountListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccountListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return TransferAccountListRequestMultiError(errors)
	}

	return nil
}

// TransferAccountListRequestMultiError is an error wrapping multiple
// validation errors returned by TransferAccountListRequest.ValidateAll() if
// the designated constraints aren't met.
type TransferAccountListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccountListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccountListRequestMultiError) AllErrors() []error { return m }

// TransferAccountListRequestValidationError is the validation error returned
// by TransferAccountListRequest.Validate if the designated constraints aren't met.
type TransferAccountListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccountListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccountListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccountListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccountListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccountListRequestValidationError) ErrorName() string {
	return "TransferAccountListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferAccountListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccountListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccountListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccountListRequestValidationError{}

// Validate checks the field values on TransferAccountListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferAccountListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccountListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccountListResponseMultiError, or nil if none found.
func (m *TransferAccountListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccountListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransferAccountListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransferAccountListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransferAccountListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransferAccountListResponseMultiError(errors)
	}

	return nil
}

// TransferAccountListResponseMultiError is an error wrapping multiple
// validation errors returned by TransferAccountListResponse.ValidateAll() if
// the designated constraints aren't met.
type TransferAccountListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccountListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccountListResponseMultiError) AllErrors() []error { return m }

// TransferAccountListResponseValidationError is the validation error returned
// by TransferAccountListResponse.Validate if the designated constraints
// aren't met.
type TransferAccountListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccountListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccountListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccountListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccountListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccountListResponseValidationError) ErrorName() string {
	return "TransferAccountListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferAccountListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccountListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccountListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccountListResponseValidationError{}

// Validate checks the field values on TransferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferListRequestMultiError, or nil if none found.
func (m *TransferListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return TransferListRequestMultiError(errors)
	}

	return nil
}

// TransferListRequestMultiError is an error wrapping multiple validation
// errors returned by TransferListRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferListRequestMultiError) AllErrors() []error { return m }

// TransferListRequestValidationError is the validation error returned by
// TransferListRequest.Validate if the designated constraints aren't met.
type TransferListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferListRequestValidationError) ErrorName() string {
	return "TransferListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferListRequestValidationError{}

// Validate checks the field values on TransferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferListResponseMultiError, or nil if none found.
func (m *TransferListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return TransferListResponseMultiError(errors)
	}

	return nil
}

// TransferListResponseMultiError is an error wrapping multiple validation
// errors returned by TransferListResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferListResponseMultiError) AllErrors() []error { return m }

// TransferListResponseValidationError is the validation error returned by
// TransferListResponse.Validate if the designated constraints aren't met.
type TransferListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferListResponseValidationError) ErrorName() string {
	return "TransferListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferListResponseValidationError{}

// Validate checks the field values on TransferCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferCreateResponseMultiError, or nil if none found.
func (m *TransferCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferCreateResponseMultiError(errors)
	}

	return nil
}

// TransferCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TransferCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferCreateResponseMultiError) AllErrors() []error { return m }

// TransferCreateResponseValidationError is the validation error returned by
// TransferCreateResponse.Validate if the designated constraints aren't met.
type TransferCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferCreateResponseValidationError) ErrorName() string {
	return "TransferCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferCreateResponseValidationError{}

// Validate checks the field values on TransferCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferCreateRequestMultiError, or nil if none found.
func (m *TransferCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for FromAccountId

	// no validation rules for ToAccountId

	// no validation rules for Amount

	// no validation rules for TransferAt

	// no validation rules for Desc

	if len(errors) > 0 {
		return TransferCreateRequestMultiError(errors)
	}

	return nil
}

// TransferCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TransferCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferCreateRequestMultiError) AllErrors() []error { return m }

// TransferCreateRequestValidationError is the validation error returned by
// TransferCreateRequest.Validate if the designated constraints aren't met.
type TransferCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferCreateRequestValidationError) ErrorName() string {
	return "TransferCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferCreateRequestValidationError{}
