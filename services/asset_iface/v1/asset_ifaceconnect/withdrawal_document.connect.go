// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: asset_iface/v1/withdrawal_document.proto

package asset_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/asset_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WithdrawalDocumentServiceName is the fully-qualified name of the WithdrawalDocumentService
	// service.
	WithdrawalDocumentServiceName = "asset_iface.v1.WithdrawalDocumentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WithdrawalDocumentServiceUploadProcedure is the fully-qualified name of the
	// WithdrawalDocumentService's Upload RPC.
	WithdrawalDocumentServiceUploadProcedure = "/asset_iface.v1.WithdrawalDocumentService/Upload"
)

// WithdrawalDocumentServiceClient is a client for the asset_iface.v1.WithdrawalDocumentService
// service.
type WithdrawalDocumentServiceClient interface {
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
}

// NewWithdrawalDocumentServiceClient constructs a client for the
// asset_iface.v1.WithdrawalDocumentService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWithdrawalDocumentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WithdrawalDocumentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	withdrawalDocumentServiceMethods := v1.File_asset_iface_v1_withdrawal_document_proto.Services().ByName("WithdrawalDocumentService").Methods()
	return &withdrawalDocumentServiceClient{
		upload: connect.NewClient[v1.UploadRequest, v1.UploadResponse](
			httpClient,
			baseURL+WithdrawalDocumentServiceUploadProcedure,
			connect.WithSchema(withdrawalDocumentServiceMethods.ByName("Upload")),
			connect.WithClientOptions(opts...),
		),
	}
}

// withdrawalDocumentServiceClient implements WithdrawalDocumentServiceClient.
type withdrawalDocumentServiceClient struct {
	upload *connect.Client[v1.UploadRequest, v1.UploadResponse]
}

// Upload calls asset_iface.v1.WithdrawalDocumentService.Upload.
func (c *withdrawalDocumentServiceClient) Upload(ctx context.Context, req *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// WithdrawalDocumentServiceHandler is an implementation of the
// asset_iface.v1.WithdrawalDocumentService service.
type WithdrawalDocumentServiceHandler interface {
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
}

// NewWithdrawalDocumentServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWithdrawalDocumentServiceHandler(svc WithdrawalDocumentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	withdrawalDocumentServiceMethods := v1.File_asset_iface_v1_withdrawal_document_proto.Services().ByName("WithdrawalDocumentService").Methods()
	withdrawalDocumentServiceUploadHandler := connect.NewUnaryHandler(
		WithdrawalDocumentServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(withdrawalDocumentServiceMethods.ByName("Upload")),
		connect.WithHandlerOptions(opts...),
	)
	return "/asset_iface.v1.WithdrawalDocumentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WithdrawalDocumentServiceUploadProcedure:
			withdrawalDocumentServiceUploadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWithdrawalDocumentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWithdrawalDocumentServiceHandler struct{}

func (UnimplementedWithdrawalDocumentServiceHandler) Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("asset_iface.v1.WithdrawalDocumentService.Upload is not implemented"))
}
