// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cache_iface/v1/cache.proto

package cache_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/cache_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CacheServiceName is the fully-qualified name of the CacheService service.
	CacheServiceName = "cache_iface.v1.CacheService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CacheServiceAddProcedure is the fully-qualified name of the CacheService's Add RPC.
	CacheServiceAddProcedure = "/cache_iface.v1.CacheService/Add"
	// CacheServiceReplaceProcedure is the fully-qualified name of the CacheService's Replace RPC.
	CacheServiceReplaceProcedure = "/cache_iface.v1.CacheService/Replace"
	// CacheServiceGetProcedure is the fully-qualified name of the CacheService's Get RPC.
	CacheServiceGetProcedure = "/cache_iface.v1.CacheService/Get"
	// CacheServiceDeleteProcedure is the fully-qualified name of the CacheService's Delete RPC.
	CacheServiceDeleteProcedure = "/cache_iface.v1.CacheService/Delete"
	// CacheServiceFlushProcedure is the fully-qualified name of the CacheService's Flush RPC.
	CacheServiceFlushProcedure = "/cache_iface.v1.CacheService/Flush"
)

// CacheServiceClient is a client for the cache_iface.v1.CacheService service.
type CacheServiceClient interface {
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Replace(context.Context, *connect.Request[v1.ReplaceRequest]) (*connect.Response[v1.ReplaceResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Flush(context.Context, *connect.Request[v1.FlushRequest]) (*connect.Response[v1.FlushResponse], error)
}

// NewCacheServiceClient constructs a client for the cache_iface.v1.CacheService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCacheServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CacheServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cacheServiceMethods := v1.File_cache_iface_v1_cache_proto.Services().ByName("CacheService").Methods()
	return &cacheServiceClient{
		add: connect.NewClient[v1.AddRequest, v1.AddResponse](
			httpClient,
			baseURL+CacheServiceAddProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Add")),
			connect.WithClientOptions(opts...),
		),
		replace: connect.NewClient[v1.ReplaceRequest, v1.ReplaceResponse](
			httpClient,
			baseURL+CacheServiceReplaceProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Replace")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+CacheServiceGetProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CacheServiceDeleteProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		flush: connect.NewClient[v1.FlushRequest, v1.FlushResponse](
			httpClient,
			baseURL+CacheServiceFlushProcedure,
			connect.WithSchema(cacheServiceMethods.ByName("Flush")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cacheServiceClient implements CacheServiceClient.
type cacheServiceClient struct {
	add     *connect.Client[v1.AddRequest, v1.AddResponse]
	replace *connect.Client[v1.ReplaceRequest, v1.ReplaceResponse]
	get     *connect.Client[v1.GetRequest, v1.GetResponse]
	delete  *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	flush   *connect.Client[v1.FlushRequest, v1.FlushResponse]
}

// Add calls cache_iface.v1.CacheService.Add.
func (c *cacheServiceClient) Add(ctx context.Context, req *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Replace calls cache_iface.v1.CacheService.Replace.
func (c *cacheServiceClient) Replace(ctx context.Context, req *connect.Request[v1.ReplaceRequest]) (*connect.Response[v1.ReplaceResponse], error) {
	return c.replace.CallUnary(ctx, req)
}

// Get calls cache_iface.v1.CacheService.Get.
func (c *cacheServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls cache_iface.v1.CacheService.Delete.
func (c *cacheServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Flush calls cache_iface.v1.CacheService.Flush.
func (c *cacheServiceClient) Flush(ctx context.Context, req *connect.Request[v1.FlushRequest]) (*connect.Response[v1.FlushResponse], error) {
	return c.flush.CallUnary(ctx, req)
}

// CacheServiceHandler is an implementation of the cache_iface.v1.CacheService service.
type CacheServiceHandler interface {
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Replace(context.Context, *connect.Request[v1.ReplaceRequest]) (*connect.Response[v1.ReplaceResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Flush(context.Context, *connect.Request[v1.FlushRequest]) (*connect.Response[v1.FlushResponse], error)
}

// NewCacheServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCacheServiceHandler(svc CacheServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cacheServiceMethods := v1.File_cache_iface_v1_cache_proto.Services().ByName("CacheService").Methods()
	cacheServiceAddHandler := connect.NewUnaryHandler(
		CacheServiceAddProcedure,
		svc.Add,
		connect.WithSchema(cacheServiceMethods.ByName("Add")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceReplaceHandler := connect.NewUnaryHandler(
		CacheServiceReplaceProcedure,
		svc.Replace,
		connect.WithSchema(cacheServiceMethods.ByName("Replace")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceGetHandler := connect.NewUnaryHandler(
		CacheServiceGetProcedure,
		svc.Get,
		connect.WithSchema(cacheServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceDeleteHandler := connect.NewUnaryHandler(
		CacheServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(cacheServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceFlushHandler := connect.NewUnaryHandler(
		CacheServiceFlushProcedure,
		svc.Flush,
		connect.WithSchema(cacheServiceMethods.ByName("Flush")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cache_iface.v1.CacheService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CacheServiceAddProcedure:
			cacheServiceAddHandler.ServeHTTP(w, r)
		case CacheServiceReplaceProcedure:
			cacheServiceReplaceHandler.ServeHTTP(w, r)
		case CacheServiceGetProcedure:
			cacheServiceGetHandler.ServeHTTP(w, r)
		case CacheServiceDeleteProcedure:
			cacheServiceDeleteHandler.ServeHTTP(w, r)
		case CacheServiceFlushProcedure:
			cacheServiceFlushHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCacheServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCacheServiceHandler struct{}

func (UnimplementedCacheServiceHandler) Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache_iface.v1.CacheService.Add is not implemented"))
}

func (UnimplementedCacheServiceHandler) Replace(context.Context, *connect.Request[v1.ReplaceRequest]) (*connect.Response[v1.ReplaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache_iface.v1.CacheService.Replace is not implemented"))
}

func (UnimplementedCacheServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache_iface.v1.CacheService.Get is not implemented"))
}

func (UnimplementedCacheServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache_iface.v1.CacheService.Delete is not implemented"))
}

func (UnimplementedCacheServiceHandler) Flush(context.Context, *connect.Request[v1.FlushRequest]) (*connect.Response[v1.FlushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache_iface.v1.CacheService.Flush is not implemented"))
}
