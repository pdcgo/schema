// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeKeyValueMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeKeyValueMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeKeyValueMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeKeyValueMetricMultiError, or nil if none found.
func (m *TimeKeyValueMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeKeyValueMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return TimeKeyValueMetricMultiError(errors)
	}

	return nil
}

// TimeKeyValueMetricMultiError is an error wrapping multiple validation errors
// returned by TimeKeyValueMetric.ValidateAll() if the designated constraints
// aren't met.
type TimeKeyValueMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeKeyValueMetricMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeKeyValueMetricMultiError) AllErrors() []error { return m }

// TimeKeyValueMetricValidationError is the validation error returned by
// TimeKeyValueMetric.Validate if the designated constraints aren't met.
type TimeKeyValueMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeKeyValueMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeKeyValueMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeKeyValueMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeKeyValueMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeKeyValueMetricValidationError) ErrorName() string {
	return "TimeKeyValueMetricValidationError"
}

// Error satisfies the builtin error interface
func (e TimeKeyValueMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeKeyValueMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeKeyValueMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeKeyValueMetricValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Username

	// no validation rules for ProfilePicture

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Team with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeamMultiError, or nil if none found.
func (m *Team) ValidateAll() error {
	return m.validate(true)
}

func (m *Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return TeamMultiError(errors)
	}

	return nil
}

// TeamMultiError is an error wrapping multiple validation errors returned by
// Team.ValidateAll() if the designated constraints aren't met.
type TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamMultiError) AllErrors() []error { return m }

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}

// Validate checks the field values on KeyName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyName with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KeyNameMultiError, or nil if none found.
func (m *KeyName) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	if len(errors) > 0 {
		return KeyNameMultiError(errors)
	}

	return nil
}

// KeyNameMultiError is an error wrapping multiple validation errors returned
// by KeyName.ValidateAll() if the designated constraints aren't met.
type KeyNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyNameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyNameMultiError) AllErrors() []error { return m }

// KeyNameValidationError is the validation error returned by KeyName.Validate
// if the designated constraints aren't met.
type KeyNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyNameValidationError) ErrorName() string { return "KeyNameValidationError" }

// Error satisfies the builtin error interface
func (e KeyNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyNameValidationError{}

// Validate checks the field values on TimeFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeFilterMultiError, or
// nil if none found.
func (m *TimeFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return TimeFilterMultiError(errors)
	}

	return nil
}

// TimeFilterMultiError is an error wrapping multiple validation errors
// returned by TimeFilter.ValidateAll() if the designated constraints aren't met.
type TimeFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeFilterMultiError) AllErrors() []error { return m }

// TimeFilterValidationError is the validation error returned by
// TimeFilter.Validate if the designated constraints aren't met.
type TimeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeFilterValidationError) ErrorName() string { return "TimeFilterValidationError" }

// Error satisfies the builtin error interface
func (e TimeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeFilterValidationError{}

// Validate checks the field values on PageFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageFilterMultiError, or
// nil if none found.
func (m *PageFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *PageFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return PageFilterMultiError(errors)
	}

	return nil
}

// PageFilterMultiError is an error wrapping multiple validation errors
// returned by PageFilter.ValidateAll() if the designated constraints aren't met.
type PageFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageFilterMultiError) AllErrors() []error { return m }

// PageFilterValidationError is the validation error returned by
// PageFilter.Validate if the designated constraints aren't met.
type PageFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageFilterValidationError) ErrorName() string { return "PageFilterValidationError" }

// Error satisfies the builtin error interface
func (e PageFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageFilterValidationError{}

// Validate checks the field values on PageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageInfoMultiError, or nil
// if none found.
func (m *PageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentPage

	// no validation rules for TotalPage

	// no validation rules for TotalItems

	if len(errors) > 0 {
		return PageInfoMultiError(errors)
	}

	return nil
}

// PageInfoMultiError is an error wrapping multiple validation errors returned
// by PageInfo.ValidateAll() if the designated constraints aren't met.
type PageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageInfoMultiError) AllErrors() []error { return m }

// PageInfoValidationError is the validation error returned by
// PageInfo.Validate if the designated constraints aren't met.
type PageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageInfoValidationError) ErrorName() string { return "PageInfoValidationError" }

// Error satisfies the builtin error interface
func (e PageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageInfoValidationError{}
