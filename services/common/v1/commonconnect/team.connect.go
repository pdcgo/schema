// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: common/v1/team.proto

package commonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/common/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeamServiceName is the fully-qualified name of the TeamService service.
	TeamServiceName = "common.v1.TeamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamServicePublicTeamIDsProcedure is the fully-qualified name of the TeamService's PublicTeamIDs
	// RPC.
	TeamServicePublicTeamIDsProcedure = "/common.v1.TeamService/PublicTeamIDs"
	// TeamServicePublicTeamListProcedure is the fully-qualified name of the TeamService's
	// PublicTeamList RPC.
	TeamServicePublicTeamListProcedure = "/common.v1.TeamService/PublicTeamList"
)

// TeamServiceClient is a client for the common.v1.TeamService service.
type TeamServiceClient interface {
	// #### Untuk Get Data User Public
	PublicTeamIDs(context.Context, *connect.Request[v1.PublicTeamIDsRequest]) (*connect.Response[v1.PublicTeamIDsResponse], error)
	PublicTeamList(context.Context, *connect.Request[v1.PublicTeamListRequest]) (*connect.Response[v1.PublicTeamListResponse], error)
}

// NewTeamServiceClient constructs a client for the common.v1.TeamService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	teamServiceMethods := v1.File_common_v1_team_proto.Services().ByName("TeamService").Methods()
	return &teamServiceClient{
		publicTeamIDs: connect.NewClient[v1.PublicTeamIDsRequest, v1.PublicTeamIDsResponse](
			httpClient,
			baseURL+TeamServicePublicTeamIDsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("PublicTeamIDs")),
			connect.WithClientOptions(opts...),
		),
		publicTeamList: connect.NewClient[v1.PublicTeamListRequest, v1.PublicTeamListResponse](
			httpClient,
			baseURL+TeamServicePublicTeamListProcedure,
			connect.WithSchema(teamServiceMethods.ByName("PublicTeamList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// teamServiceClient implements TeamServiceClient.
type teamServiceClient struct {
	publicTeamIDs  *connect.Client[v1.PublicTeamIDsRequest, v1.PublicTeamIDsResponse]
	publicTeamList *connect.Client[v1.PublicTeamListRequest, v1.PublicTeamListResponse]
}

// PublicTeamIDs calls common.v1.TeamService.PublicTeamIDs.
func (c *teamServiceClient) PublicTeamIDs(ctx context.Context, req *connect.Request[v1.PublicTeamIDsRequest]) (*connect.Response[v1.PublicTeamIDsResponse], error) {
	return c.publicTeamIDs.CallUnary(ctx, req)
}

// PublicTeamList calls common.v1.TeamService.PublicTeamList.
func (c *teamServiceClient) PublicTeamList(ctx context.Context, req *connect.Request[v1.PublicTeamListRequest]) (*connect.Response[v1.PublicTeamListResponse], error) {
	return c.publicTeamList.CallUnary(ctx, req)
}

// TeamServiceHandler is an implementation of the common.v1.TeamService service.
type TeamServiceHandler interface {
	// #### Untuk Get Data User Public
	PublicTeamIDs(context.Context, *connect.Request[v1.PublicTeamIDsRequest]) (*connect.Response[v1.PublicTeamIDsResponse], error)
	PublicTeamList(context.Context, *connect.Request[v1.PublicTeamListRequest]) (*connect.Response[v1.PublicTeamListResponse], error)
}

// NewTeamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamServiceHandler(svc TeamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamServiceMethods := v1.File_common_v1_team_proto.Services().ByName("TeamService").Methods()
	teamServicePublicTeamIDsHandler := connect.NewUnaryHandler(
		TeamServicePublicTeamIDsProcedure,
		svc.PublicTeamIDs,
		connect.WithSchema(teamServiceMethods.ByName("PublicTeamIDs")),
		connect.WithHandlerOptions(opts...),
	)
	teamServicePublicTeamListHandler := connect.NewUnaryHandler(
		TeamServicePublicTeamListProcedure,
		svc.PublicTeamList,
		connect.WithSchema(teamServiceMethods.ByName("PublicTeamList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/common.v1.TeamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamServicePublicTeamIDsProcedure:
			teamServicePublicTeamIDsHandler.ServeHTTP(w, r)
		case TeamServicePublicTeamListProcedure:
			teamServicePublicTeamListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamServiceHandler struct{}

func (UnimplementedTeamServiceHandler) PublicTeamIDs(context.Context, *connect.Request[v1.PublicTeamIDsRequest]) (*connect.Response[v1.PublicTeamIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.v1.TeamService.PublicTeamIDs is not implemented"))
}

func (UnimplementedTeamServiceHandler) PublicTeamList(context.Context, *connect.Request[v1.PublicTeamListRequest]) (*connect.Response[v1.PublicTeamListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.v1.TeamService.PublicTeamList is not implemented"))
}
