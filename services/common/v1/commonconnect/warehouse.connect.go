// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: common/v1/warehouse.proto

package commonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/common/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WarehouseServiceName is the fully-qualified name of the WarehouseService service.
	WarehouseServiceName = "common.v1.WarehouseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WarehouseServicePublicWarehouseIDsProcedure is the fully-qualified name of the WarehouseService's
	// PublicWarehouseIDs RPC.
	WarehouseServicePublicWarehouseIDsProcedure = "/common.v1.WarehouseService/PublicWarehouseIDs"
)

// WarehouseServiceClient is a client for the common.v1.WarehouseService service.
type WarehouseServiceClient interface {
	PublicWarehouseIDs(context.Context, *connect.Request[v1.PublicWarehouseIDsRequest]) (*connect.Response[v1.PublicWarehouseIDsResponse], error)
}

// NewWarehouseServiceClient constructs a client for the common.v1.WarehouseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWarehouseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WarehouseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	warehouseServiceMethods := v1.File_common_v1_warehouse_proto.Services().ByName("WarehouseService").Methods()
	return &warehouseServiceClient{
		publicWarehouseIDs: connect.NewClient[v1.PublicWarehouseIDsRequest, v1.PublicWarehouseIDsResponse](
			httpClient,
			baseURL+WarehouseServicePublicWarehouseIDsProcedure,
			connect.WithSchema(warehouseServiceMethods.ByName("PublicWarehouseIDs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// warehouseServiceClient implements WarehouseServiceClient.
type warehouseServiceClient struct {
	publicWarehouseIDs *connect.Client[v1.PublicWarehouseIDsRequest, v1.PublicWarehouseIDsResponse]
}

// PublicWarehouseIDs calls common.v1.WarehouseService.PublicWarehouseIDs.
func (c *warehouseServiceClient) PublicWarehouseIDs(ctx context.Context, req *connect.Request[v1.PublicWarehouseIDsRequest]) (*connect.Response[v1.PublicWarehouseIDsResponse], error) {
	return c.publicWarehouseIDs.CallUnary(ctx, req)
}

// WarehouseServiceHandler is an implementation of the common.v1.WarehouseService service.
type WarehouseServiceHandler interface {
	PublicWarehouseIDs(context.Context, *connect.Request[v1.PublicWarehouseIDsRequest]) (*connect.Response[v1.PublicWarehouseIDsResponse], error)
}

// NewWarehouseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWarehouseServiceHandler(svc WarehouseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	warehouseServiceMethods := v1.File_common_v1_warehouse_proto.Services().ByName("WarehouseService").Methods()
	warehouseServicePublicWarehouseIDsHandler := connect.NewUnaryHandler(
		WarehouseServicePublicWarehouseIDsProcedure,
		svc.PublicWarehouseIDs,
		connect.WithSchema(warehouseServiceMethods.ByName("PublicWarehouseIDs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/common.v1.WarehouseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WarehouseServicePublicWarehouseIDsProcedure:
			warehouseServicePublicWarehouseIDsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWarehouseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWarehouseServiceHandler struct{}

func (UnimplementedWarehouseServiceHandler) PublicWarehouseIDs(context.Context, *connect.Request[v1.PublicWarehouseIDsRequest]) (*connect.Response[v1.PublicWarehouseIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.v1.WarehouseService.PublicWarehouseIDs is not implemented"))
}
