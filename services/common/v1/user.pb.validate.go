// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/user.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PublicUserIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicUserIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicUserIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicUserIDsRequestMultiError, or nil if none found.
func (m *PublicUserIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicUserIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicUserIDsRequestMultiError(errors)
	}

	return nil
}

// PublicUserIDsRequestMultiError is an error wrapping multiple validation
// errors returned by PublicUserIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type PublicUserIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicUserIDsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicUserIDsRequestMultiError) AllErrors() []error { return m }

// PublicUserIDsRequestValidationError is the validation error returned by
// PublicUserIDsRequest.Validate if the designated constraints aren't met.
type PublicUserIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicUserIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicUserIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicUserIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicUserIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicUserIDsRequestValidationError) ErrorName() string {
	return "PublicUserIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicUserIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicUserIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicUserIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicUserIDsRequestValidationError{}

// Validate checks the field values on PublicUserIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicUserIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicUserIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicUserIDsResponseMultiError, or nil if none found.
func (m *PublicUserIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicUserIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]uint64, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PublicUserIDsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PublicUserIDsResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PublicUserIDsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PublicUserIDsResponseMultiError(errors)
	}

	return nil
}

// PublicUserIDsResponseMultiError is an error wrapping multiple validation
// errors returned by PublicUserIDsResponse.ValidateAll() if the designated
// constraints aren't met.
type PublicUserIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicUserIDsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicUserIDsResponseMultiError) AllErrors() []error { return m }

// PublicUserIDsResponseValidationError is the validation error returned by
// PublicUserIDsResponse.Validate if the designated constraints aren't met.
type PublicUserIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicUserIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicUserIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicUserIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicUserIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicUserIDsResponseValidationError) ErrorName() string {
	return "PublicUserIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicUserIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicUserIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicUserIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicUserIDsResponseValidationError{}
