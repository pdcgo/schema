// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: report_iface/v1/account_report.proto

package report_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/report_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountReportServiceName is the fully-qualified name of the AccountReportService service.
	AccountReportServiceName = "report_iface.v1.AccountReportService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountReportServiceBalanceProcedure is the fully-qualified name of the AccountReportService's
	// Balance RPC.
	AccountReportServiceBalanceProcedure = "/report_iface.v1.AccountReportService/Balance"
	// AccountReportServiceDailyBalanceProcedure is the fully-qualified name of the
	// AccountReportService's DailyBalance RPC.
	AccountReportServiceDailyBalanceProcedure = "/report_iface.v1.AccountReportService/DailyBalance"
)

// AccountReportServiceClient is a client for the report_iface.v1.AccountReportService service.
type AccountReportServiceClient interface {
	Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error)
	DailyBalance(context.Context, *connect.Request[v1.DailyBalanceRequest]) (*connect.Response[v1.DailyBalanceResponse], error)
}

// NewAccountReportServiceClient constructs a client for the report_iface.v1.AccountReportService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountReportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountReportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountReportServiceMethods := v1.File_report_iface_v1_account_report_proto.Services().ByName("AccountReportService").Methods()
	return &accountReportServiceClient{
		balance: connect.NewClient[v1.BalanceRequest, v1.BalanceResponse](
			httpClient,
			baseURL+AccountReportServiceBalanceProcedure,
			connect.WithSchema(accountReportServiceMethods.ByName("Balance")),
			connect.WithClientOptions(opts...),
		),
		dailyBalance: connect.NewClient[v1.DailyBalanceRequest, v1.DailyBalanceResponse](
			httpClient,
			baseURL+AccountReportServiceDailyBalanceProcedure,
			connect.WithSchema(accountReportServiceMethods.ByName("DailyBalance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountReportServiceClient implements AccountReportServiceClient.
type accountReportServiceClient struct {
	balance      *connect.Client[v1.BalanceRequest, v1.BalanceResponse]
	dailyBalance *connect.Client[v1.DailyBalanceRequest, v1.DailyBalanceResponse]
}

// Balance calls report_iface.v1.AccountReportService.Balance.
func (c *accountReportServiceClient) Balance(ctx context.Context, req *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error) {
	return c.balance.CallUnary(ctx, req)
}

// DailyBalance calls report_iface.v1.AccountReportService.DailyBalance.
func (c *accountReportServiceClient) DailyBalance(ctx context.Context, req *connect.Request[v1.DailyBalanceRequest]) (*connect.Response[v1.DailyBalanceResponse], error) {
	return c.dailyBalance.CallUnary(ctx, req)
}

// AccountReportServiceHandler is an implementation of the report_iface.v1.AccountReportService
// service.
type AccountReportServiceHandler interface {
	Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error)
	DailyBalance(context.Context, *connect.Request[v1.DailyBalanceRequest]) (*connect.Response[v1.DailyBalanceResponse], error)
}

// NewAccountReportServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountReportServiceHandler(svc AccountReportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountReportServiceMethods := v1.File_report_iface_v1_account_report_proto.Services().ByName("AccountReportService").Methods()
	accountReportServiceBalanceHandler := connect.NewUnaryHandler(
		AccountReportServiceBalanceProcedure,
		svc.Balance,
		connect.WithSchema(accountReportServiceMethods.ByName("Balance")),
		connect.WithHandlerOptions(opts...),
	)
	accountReportServiceDailyBalanceHandler := connect.NewUnaryHandler(
		AccountReportServiceDailyBalanceProcedure,
		svc.DailyBalance,
		connect.WithSchema(accountReportServiceMethods.ByName("DailyBalance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/report_iface.v1.AccountReportService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountReportServiceBalanceProcedure:
			accountReportServiceBalanceHandler.ServeHTTP(w, r)
		case AccountReportServiceDailyBalanceProcedure:
			accountReportServiceDailyBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountReportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountReportServiceHandler struct{}

func (UnimplementedAccountReportServiceHandler) Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("report_iface.v1.AccountReportService.Balance is not implemented"))
}

func (UnimplementedAccountReportServiceHandler) DailyBalance(context.Context, *connect.Request[v1.DailyBalanceRequest]) (*connect.Response[v1.DailyBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("report_iface.v1.AccountReportService.DailyBalance is not implemented"))
}
