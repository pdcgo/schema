// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: revenue_iface/v1/revenue.proto

package revenue_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/revenue_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RevenueServiceName is the fully-qualified name of the RevenueService service.
	RevenueServiceName = "revenue_iface.v1.RevenueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RevenueServiceOnOrderProcedure is the fully-qualified name of the RevenueService's OnOrder RPC.
	RevenueServiceOnOrderProcedure = "/revenue_iface.v1.RevenueService/OnOrder"
	// RevenueServiceOrderCancelProcedure is the fully-qualified name of the RevenueService's
	// OrderCancel RPC.
	RevenueServiceOrderCancelProcedure = "/revenue_iface.v1.RevenueService/OrderCancel"
	// RevenueServiceOrderReturnProcedure is the fully-qualified name of the RevenueService's
	// OrderReturn RPC.
	RevenueServiceOrderReturnProcedure = "/revenue_iface.v1.RevenueService/OrderReturn"
	// RevenueServiceOrderCompletedProcedure is the fully-qualified name of the RevenueService's
	// OrderCompleted RPC.
	RevenueServiceOrderCompletedProcedure = "/revenue_iface.v1.RevenueService/OrderCompleted"
	// RevenueServiceRevenueAdjustmentProcedure is the fully-qualified name of the RevenueService's
	// RevenueAdjustment RPC.
	RevenueServiceRevenueAdjustmentProcedure = "/revenue_iface.v1.RevenueService/RevenueAdjustment"
	// RevenueServiceWithdrawalProcedure is the fully-qualified name of the RevenueService's Withdrawal
	// RPC.
	RevenueServiceWithdrawalProcedure = "/revenue_iface.v1.RevenueService/Withdrawal"
)

// RevenueServiceClient is a client for the revenue_iface.v1.RevenueService service.
type RevenueServiceClient interface {
	OnOrder(context.Context) *connect.ClientStreamForClient[v1.OnOrderRequest, v1.OnOrderResponse]
	OrderCancel(context.Context, *connect.Request[v1.OrderCancelRequest]) (*connect.Response[v1.OrderCancelResponse], error)
	OrderReturn(context.Context, *connect.Request[v1.OrderReturnRequest]) (*connect.Response[v1.OrderReturnResponse], error)
	OrderCompleted(context.Context, *connect.Request[v1.OrderCompletedRequest]) (*connect.Response[v1.OrderCompletedResponse], error)
	RevenueAdjustment(context.Context, *connect.Request[v1.RevenueAdjustmentRequest]) (*connect.Response[v1.RevenueAdjustmentResponse], error)
	Withdrawal(context.Context, *connect.Request[v1.WithdrawalRequest]) (*connect.Response[v1.WithdrawalResponse], error)
}

// NewRevenueServiceClient constructs a client for the revenue_iface.v1.RevenueService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRevenueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RevenueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	revenueServiceMethods := v1.File_revenue_iface_v1_revenue_proto.Services().ByName("RevenueService").Methods()
	return &revenueServiceClient{
		onOrder: connect.NewClient[v1.OnOrderRequest, v1.OnOrderResponse](
			httpClient,
			baseURL+RevenueServiceOnOrderProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("OnOrder")),
			connect.WithClientOptions(opts...),
		),
		orderCancel: connect.NewClient[v1.OrderCancelRequest, v1.OrderCancelResponse](
			httpClient,
			baseURL+RevenueServiceOrderCancelProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("OrderCancel")),
			connect.WithClientOptions(opts...),
		),
		orderReturn: connect.NewClient[v1.OrderReturnRequest, v1.OrderReturnResponse](
			httpClient,
			baseURL+RevenueServiceOrderReturnProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("OrderReturn")),
			connect.WithClientOptions(opts...),
		),
		orderCompleted: connect.NewClient[v1.OrderCompletedRequest, v1.OrderCompletedResponse](
			httpClient,
			baseURL+RevenueServiceOrderCompletedProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("OrderCompleted")),
			connect.WithClientOptions(opts...),
		),
		revenueAdjustment: connect.NewClient[v1.RevenueAdjustmentRequest, v1.RevenueAdjustmentResponse](
			httpClient,
			baseURL+RevenueServiceRevenueAdjustmentProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("RevenueAdjustment")),
			connect.WithClientOptions(opts...),
		),
		withdrawal: connect.NewClient[v1.WithdrawalRequest, v1.WithdrawalResponse](
			httpClient,
			baseURL+RevenueServiceWithdrawalProcedure,
			connect.WithSchema(revenueServiceMethods.ByName("Withdrawal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// revenueServiceClient implements RevenueServiceClient.
type revenueServiceClient struct {
	onOrder           *connect.Client[v1.OnOrderRequest, v1.OnOrderResponse]
	orderCancel       *connect.Client[v1.OrderCancelRequest, v1.OrderCancelResponse]
	orderReturn       *connect.Client[v1.OrderReturnRequest, v1.OrderReturnResponse]
	orderCompleted    *connect.Client[v1.OrderCompletedRequest, v1.OrderCompletedResponse]
	revenueAdjustment *connect.Client[v1.RevenueAdjustmentRequest, v1.RevenueAdjustmentResponse]
	withdrawal        *connect.Client[v1.WithdrawalRequest, v1.WithdrawalResponse]
}

// OnOrder calls revenue_iface.v1.RevenueService.OnOrder.
func (c *revenueServiceClient) OnOrder(ctx context.Context) *connect.ClientStreamForClient[v1.OnOrderRequest, v1.OnOrderResponse] {
	return c.onOrder.CallClientStream(ctx)
}

// OrderCancel calls revenue_iface.v1.RevenueService.OrderCancel.
func (c *revenueServiceClient) OrderCancel(ctx context.Context, req *connect.Request[v1.OrderCancelRequest]) (*connect.Response[v1.OrderCancelResponse], error) {
	return c.orderCancel.CallUnary(ctx, req)
}

// OrderReturn calls revenue_iface.v1.RevenueService.OrderReturn.
func (c *revenueServiceClient) OrderReturn(ctx context.Context, req *connect.Request[v1.OrderReturnRequest]) (*connect.Response[v1.OrderReturnResponse], error) {
	return c.orderReturn.CallUnary(ctx, req)
}

// OrderCompleted calls revenue_iface.v1.RevenueService.OrderCompleted.
func (c *revenueServiceClient) OrderCompleted(ctx context.Context, req *connect.Request[v1.OrderCompletedRequest]) (*connect.Response[v1.OrderCompletedResponse], error) {
	return c.orderCompleted.CallUnary(ctx, req)
}

// RevenueAdjustment calls revenue_iface.v1.RevenueService.RevenueAdjustment.
func (c *revenueServiceClient) RevenueAdjustment(ctx context.Context, req *connect.Request[v1.RevenueAdjustmentRequest]) (*connect.Response[v1.RevenueAdjustmentResponse], error) {
	return c.revenueAdjustment.CallUnary(ctx, req)
}

// Withdrawal calls revenue_iface.v1.RevenueService.Withdrawal.
func (c *revenueServiceClient) Withdrawal(ctx context.Context, req *connect.Request[v1.WithdrawalRequest]) (*connect.Response[v1.WithdrawalResponse], error) {
	return c.withdrawal.CallUnary(ctx, req)
}

// RevenueServiceHandler is an implementation of the revenue_iface.v1.RevenueService service.
type RevenueServiceHandler interface {
	OnOrder(context.Context, *connect.ClientStream[v1.OnOrderRequest]) (*connect.Response[v1.OnOrderResponse], error)
	OrderCancel(context.Context, *connect.Request[v1.OrderCancelRequest]) (*connect.Response[v1.OrderCancelResponse], error)
	OrderReturn(context.Context, *connect.Request[v1.OrderReturnRequest]) (*connect.Response[v1.OrderReturnResponse], error)
	OrderCompleted(context.Context, *connect.Request[v1.OrderCompletedRequest]) (*connect.Response[v1.OrderCompletedResponse], error)
	RevenueAdjustment(context.Context, *connect.Request[v1.RevenueAdjustmentRequest]) (*connect.Response[v1.RevenueAdjustmentResponse], error)
	Withdrawal(context.Context, *connect.Request[v1.WithdrawalRequest]) (*connect.Response[v1.WithdrawalResponse], error)
}

// NewRevenueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRevenueServiceHandler(svc RevenueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	revenueServiceMethods := v1.File_revenue_iface_v1_revenue_proto.Services().ByName("RevenueService").Methods()
	revenueServiceOnOrderHandler := connect.NewClientStreamHandler(
		RevenueServiceOnOrderProcedure,
		svc.OnOrder,
		connect.WithSchema(revenueServiceMethods.ByName("OnOrder")),
		connect.WithHandlerOptions(opts...),
	)
	revenueServiceOrderCancelHandler := connect.NewUnaryHandler(
		RevenueServiceOrderCancelProcedure,
		svc.OrderCancel,
		connect.WithSchema(revenueServiceMethods.ByName("OrderCancel")),
		connect.WithHandlerOptions(opts...),
	)
	revenueServiceOrderReturnHandler := connect.NewUnaryHandler(
		RevenueServiceOrderReturnProcedure,
		svc.OrderReturn,
		connect.WithSchema(revenueServiceMethods.ByName("OrderReturn")),
		connect.WithHandlerOptions(opts...),
	)
	revenueServiceOrderCompletedHandler := connect.NewUnaryHandler(
		RevenueServiceOrderCompletedProcedure,
		svc.OrderCompleted,
		connect.WithSchema(revenueServiceMethods.ByName("OrderCompleted")),
		connect.WithHandlerOptions(opts...),
	)
	revenueServiceRevenueAdjustmentHandler := connect.NewUnaryHandler(
		RevenueServiceRevenueAdjustmentProcedure,
		svc.RevenueAdjustment,
		connect.WithSchema(revenueServiceMethods.ByName("RevenueAdjustment")),
		connect.WithHandlerOptions(opts...),
	)
	revenueServiceWithdrawalHandler := connect.NewUnaryHandler(
		RevenueServiceWithdrawalProcedure,
		svc.Withdrawal,
		connect.WithSchema(revenueServiceMethods.ByName("Withdrawal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/revenue_iface.v1.RevenueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RevenueServiceOnOrderProcedure:
			revenueServiceOnOrderHandler.ServeHTTP(w, r)
		case RevenueServiceOrderCancelProcedure:
			revenueServiceOrderCancelHandler.ServeHTTP(w, r)
		case RevenueServiceOrderReturnProcedure:
			revenueServiceOrderReturnHandler.ServeHTTP(w, r)
		case RevenueServiceOrderCompletedProcedure:
			revenueServiceOrderCompletedHandler.ServeHTTP(w, r)
		case RevenueServiceRevenueAdjustmentProcedure:
			revenueServiceRevenueAdjustmentHandler.ServeHTTP(w, r)
		case RevenueServiceWithdrawalProcedure:
			revenueServiceWithdrawalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRevenueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRevenueServiceHandler struct{}

func (UnimplementedRevenueServiceHandler) OnOrder(context.Context, *connect.ClientStream[v1.OnOrderRequest]) (*connect.Response[v1.OnOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.OnOrder is not implemented"))
}

func (UnimplementedRevenueServiceHandler) OrderCancel(context.Context, *connect.Request[v1.OrderCancelRequest]) (*connect.Response[v1.OrderCancelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.OrderCancel is not implemented"))
}

func (UnimplementedRevenueServiceHandler) OrderReturn(context.Context, *connect.Request[v1.OrderReturnRequest]) (*connect.Response[v1.OrderReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.OrderReturn is not implemented"))
}

func (UnimplementedRevenueServiceHandler) OrderCompleted(context.Context, *connect.Request[v1.OrderCompletedRequest]) (*connect.Response[v1.OrderCompletedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.OrderCompleted is not implemented"))
}

func (UnimplementedRevenueServiceHandler) RevenueAdjustment(context.Context, *connect.Request[v1.RevenueAdjustmentRequest]) (*connect.Response[v1.RevenueAdjustmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.RevenueAdjustment is not implemented"))
}

func (UnimplementedRevenueServiceHandler) Withdrawal(context.Context, *connect.Request[v1.WithdrawalRequest]) (*connect.Response[v1.WithdrawalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revenue_iface.v1.RevenueService.Withdrawal is not implemented"))
}
