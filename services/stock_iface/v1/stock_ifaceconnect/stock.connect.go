// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stock_iface/v1/stock.proto

package stock_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/stock_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StockServiceName is the fully-qualified name of the StockService service.
	StockServiceName = "stock_iface.v1.StockService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StockServiceInboundCreateProcedure is the fully-qualified name of the StockService's
	// InboundCreate RPC.
	StockServiceInboundCreateProcedure = "/stock_iface.v1.StockService/InboundCreate"
	// StockServiceInboundUpdateProcedure is the fully-qualified name of the StockService's
	// InboundUpdate RPC.
	StockServiceInboundUpdateProcedure = "/stock_iface.v1.StockService/InboundUpdate"
	// StockServiceInboundAcceptProcedure is the fully-qualified name of the StockService's
	// InboundAccept RPC.
	StockServiceInboundAcceptProcedure = "/stock_iface.v1.StockService/InboundAccept"
	// StockServiceStockAdjustmentProcedure is the fully-qualified name of the StockService's
	// StockAdjustment RPC.
	StockServiceStockAdjustmentProcedure = "/stock_iface.v1.StockService/StockAdjustment"
	// StockServiceTransferToWarehouseProcedure is the fully-qualified name of the StockService's
	// TransferToWarehouse RPC.
	StockServiceTransferToWarehouseProcedure = "/stock_iface.v1.StockService/TransferToWarehouse"
	// StockServiceTransferToWarehouseAcceptProcedure is the fully-qualified name of the StockService's
	// TransferToWarehouseAccept RPC.
	StockServiceTransferToWarehouseAcceptProcedure = "/stock_iface.v1.StockService/TransferToWarehouseAccept"
	// StockServiceTransferToWarehouseCancelProcedure is the fully-qualified name of the StockService's
	// TransferToWarehouseCancel RPC.
	StockServiceTransferToWarehouseCancelProcedure = "/stock_iface.v1.StockService/TransferToWarehouseCancel"
)

// StockServiceClient is a client for the stock_iface.v1.StockService service.
type StockServiceClient interface {
	// inbound
	InboundCreate(context.Context, *connect.Request[v1.InboundCreateRequest]) (*connect.Response[v1.InboundCreateResponse], error)
	InboundUpdate(context.Context, *connect.Request[v1.InboundUpdateRequest]) (*connect.Response[v1.InboundUpdateResponse], error)
	InboundAccept(context.Context, *connect.Request[v1.InboundAcceptRequest]) (*connect.Response[v1.InboundAcceptResponse], error)
	// rpc InboundLost
	StockAdjustment(context.Context, *connect.Request[v1.StockAdjustmentRequest]) (*connect.Response[v1.StockAdjustmentResponse], error)
	TransferToWarehouse(context.Context, *connect.Request[v1.TransferToWarehouseRequest]) (*connect.Response[v1.TransferToWarehouseResponse], error)
	TransferToWarehouseAccept(context.Context, *connect.Request[v1.TransferToWarehouseAcceptRequest]) (*connect.Response[v1.TransferToWarehouseAcceptResponse], error)
	TransferToWarehouseCancel(context.Context, *connect.Request[v1.TransferToWarehouseCancelRequest]) (*connect.Response[v1.TransferToWarehouseCancelResponse], error)
}

// NewStockServiceClient constructs a client for the stock_iface.v1.StockService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStockServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StockServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stockServiceMethods := v1.File_stock_iface_v1_stock_proto.Services().ByName("StockService").Methods()
	return &stockServiceClient{
		inboundCreate: connect.NewClient[v1.InboundCreateRequest, v1.InboundCreateResponse](
			httpClient,
			baseURL+StockServiceInboundCreateProcedure,
			connect.WithSchema(stockServiceMethods.ByName("InboundCreate")),
			connect.WithClientOptions(opts...),
		),
		inboundUpdate: connect.NewClient[v1.InboundUpdateRequest, v1.InboundUpdateResponse](
			httpClient,
			baseURL+StockServiceInboundUpdateProcedure,
			connect.WithSchema(stockServiceMethods.ByName("InboundUpdate")),
			connect.WithClientOptions(opts...),
		),
		inboundAccept: connect.NewClient[v1.InboundAcceptRequest, v1.InboundAcceptResponse](
			httpClient,
			baseURL+StockServiceInboundAcceptProcedure,
			connect.WithSchema(stockServiceMethods.ByName("InboundAccept")),
			connect.WithClientOptions(opts...),
		),
		stockAdjustment: connect.NewClient[v1.StockAdjustmentRequest, v1.StockAdjustmentResponse](
			httpClient,
			baseURL+StockServiceStockAdjustmentProcedure,
			connect.WithSchema(stockServiceMethods.ByName("StockAdjustment")),
			connect.WithClientOptions(opts...),
		),
		transferToWarehouse: connect.NewClient[v1.TransferToWarehouseRequest, v1.TransferToWarehouseResponse](
			httpClient,
			baseURL+StockServiceTransferToWarehouseProcedure,
			connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouse")),
			connect.WithClientOptions(opts...),
		),
		transferToWarehouseAccept: connect.NewClient[v1.TransferToWarehouseAcceptRequest, v1.TransferToWarehouseAcceptResponse](
			httpClient,
			baseURL+StockServiceTransferToWarehouseAcceptProcedure,
			connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouseAccept")),
			connect.WithClientOptions(opts...),
		),
		transferToWarehouseCancel: connect.NewClient[v1.TransferToWarehouseCancelRequest, v1.TransferToWarehouseCancelResponse](
			httpClient,
			baseURL+StockServiceTransferToWarehouseCancelProcedure,
			connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouseCancel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stockServiceClient implements StockServiceClient.
type stockServiceClient struct {
	inboundCreate             *connect.Client[v1.InboundCreateRequest, v1.InboundCreateResponse]
	inboundUpdate             *connect.Client[v1.InboundUpdateRequest, v1.InboundUpdateResponse]
	inboundAccept             *connect.Client[v1.InboundAcceptRequest, v1.InboundAcceptResponse]
	stockAdjustment           *connect.Client[v1.StockAdjustmentRequest, v1.StockAdjustmentResponse]
	transferToWarehouse       *connect.Client[v1.TransferToWarehouseRequest, v1.TransferToWarehouseResponse]
	transferToWarehouseAccept *connect.Client[v1.TransferToWarehouseAcceptRequest, v1.TransferToWarehouseAcceptResponse]
	transferToWarehouseCancel *connect.Client[v1.TransferToWarehouseCancelRequest, v1.TransferToWarehouseCancelResponse]
}

// InboundCreate calls stock_iface.v1.StockService.InboundCreate.
func (c *stockServiceClient) InboundCreate(ctx context.Context, req *connect.Request[v1.InboundCreateRequest]) (*connect.Response[v1.InboundCreateResponse], error) {
	return c.inboundCreate.CallUnary(ctx, req)
}

// InboundUpdate calls stock_iface.v1.StockService.InboundUpdate.
func (c *stockServiceClient) InboundUpdate(ctx context.Context, req *connect.Request[v1.InboundUpdateRequest]) (*connect.Response[v1.InboundUpdateResponse], error) {
	return c.inboundUpdate.CallUnary(ctx, req)
}

// InboundAccept calls stock_iface.v1.StockService.InboundAccept.
func (c *stockServiceClient) InboundAccept(ctx context.Context, req *connect.Request[v1.InboundAcceptRequest]) (*connect.Response[v1.InboundAcceptResponse], error) {
	return c.inboundAccept.CallUnary(ctx, req)
}

// StockAdjustment calls stock_iface.v1.StockService.StockAdjustment.
func (c *stockServiceClient) StockAdjustment(ctx context.Context, req *connect.Request[v1.StockAdjustmentRequest]) (*connect.Response[v1.StockAdjustmentResponse], error) {
	return c.stockAdjustment.CallUnary(ctx, req)
}

// TransferToWarehouse calls stock_iface.v1.StockService.TransferToWarehouse.
func (c *stockServiceClient) TransferToWarehouse(ctx context.Context, req *connect.Request[v1.TransferToWarehouseRequest]) (*connect.Response[v1.TransferToWarehouseResponse], error) {
	return c.transferToWarehouse.CallUnary(ctx, req)
}

// TransferToWarehouseAccept calls stock_iface.v1.StockService.TransferToWarehouseAccept.
func (c *stockServiceClient) TransferToWarehouseAccept(ctx context.Context, req *connect.Request[v1.TransferToWarehouseAcceptRequest]) (*connect.Response[v1.TransferToWarehouseAcceptResponse], error) {
	return c.transferToWarehouseAccept.CallUnary(ctx, req)
}

// TransferToWarehouseCancel calls stock_iface.v1.StockService.TransferToWarehouseCancel.
func (c *stockServiceClient) TransferToWarehouseCancel(ctx context.Context, req *connect.Request[v1.TransferToWarehouseCancelRequest]) (*connect.Response[v1.TransferToWarehouseCancelResponse], error) {
	return c.transferToWarehouseCancel.CallUnary(ctx, req)
}

// StockServiceHandler is an implementation of the stock_iface.v1.StockService service.
type StockServiceHandler interface {
	// inbound
	InboundCreate(context.Context, *connect.Request[v1.InboundCreateRequest]) (*connect.Response[v1.InboundCreateResponse], error)
	InboundUpdate(context.Context, *connect.Request[v1.InboundUpdateRequest]) (*connect.Response[v1.InboundUpdateResponse], error)
	InboundAccept(context.Context, *connect.Request[v1.InboundAcceptRequest]) (*connect.Response[v1.InboundAcceptResponse], error)
	// rpc InboundLost
	StockAdjustment(context.Context, *connect.Request[v1.StockAdjustmentRequest]) (*connect.Response[v1.StockAdjustmentResponse], error)
	TransferToWarehouse(context.Context, *connect.Request[v1.TransferToWarehouseRequest]) (*connect.Response[v1.TransferToWarehouseResponse], error)
	TransferToWarehouseAccept(context.Context, *connect.Request[v1.TransferToWarehouseAcceptRequest]) (*connect.Response[v1.TransferToWarehouseAcceptResponse], error)
	TransferToWarehouseCancel(context.Context, *connect.Request[v1.TransferToWarehouseCancelRequest]) (*connect.Response[v1.TransferToWarehouseCancelResponse], error)
}

// NewStockServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStockServiceHandler(svc StockServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stockServiceMethods := v1.File_stock_iface_v1_stock_proto.Services().ByName("StockService").Methods()
	stockServiceInboundCreateHandler := connect.NewUnaryHandler(
		StockServiceInboundCreateProcedure,
		svc.InboundCreate,
		connect.WithSchema(stockServiceMethods.ByName("InboundCreate")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceInboundUpdateHandler := connect.NewUnaryHandler(
		StockServiceInboundUpdateProcedure,
		svc.InboundUpdate,
		connect.WithSchema(stockServiceMethods.ByName("InboundUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceInboundAcceptHandler := connect.NewUnaryHandler(
		StockServiceInboundAcceptProcedure,
		svc.InboundAccept,
		connect.WithSchema(stockServiceMethods.ByName("InboundAccept")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceStockAdjustmentHandler := connect.NewUnaryHandler(
		StockServiceStockAdjustmentProcedure,
		svc.StockAdjustment,
		connect.WithSchema(stockServiceMethods.ByName("StockAdjustment")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceTransferToWarehouseHandler := connect.NewUnaryHandler(
		StockServiceTransferToWarehouseProcedure,
		svc.TransferToWarehouse,
		connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouse")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceTransferToWarehouseAcceptHandler := connect.NewUnaryHandler(
		StockServiceTransferToWarehouseAcceptProcedure,
		svc.TransferToWarehouseAccept,
		connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouseAccept")),
		connect.WithHandlerOptions(opts...),
	)
	stockServiceTransferToWarehouseCancelHandler := connect.NewUnaryHandler(
		StockServiceTransferToWarehouseCancelProcedure,
		svc.TransferToWarehouseCancel,
		connect.WithSchema(stockServiceMethods.ByName("TransferToWarehouseCancel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/stock_iface.v1.StockService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StockServiceInboundCreateProcedure:
			stockServiceInboundCreateHandler.ServeHTTP(w, r)
		case StockServiceInboundUpdateProcedure:
			stockServiceInboundUpdateHandler.ServeHTTP(w, r)
		case StockServiceInboundAcceptProcedure:
			stockServiceInboundAcceptHandler.ServeHTTP(w, r)
		case StockServiceStockAdjustmentProcedure:
			stockServiceStockAdjustmentHandler.ServeHTTP(w, r)
		case StockServiceTransferToWarehouseProcedure:
			stockServiceTransferToWarehouseHandler.ServeHTTP(w, r)
		case StockServiceTransferToWarehouseAcceptProcedure:
			stockServiceTransferToWarehouseAcceptHandler.ServeHTTP(w, r)
		case StockServiceTransferToWarehouseCancelProcedure:
			stockServiceTransferToWarehouseCancelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStockServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStockServiceHandler struct{}

func (UnimplementedStockServiceHandler) InboundCreate(context.Context, *connect.Request[v1.InboundCreateRequest]) (*connect.Response[v1.InboundCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.InboundCreate is not implemented"))
}

func (UnimplementedStockServiceHandler) InboundUpdate(context.Context, *connect.Request[v1.InboundUpdateRequest]) (*connect.Response[v1.InboundUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.InboundUpdate is not implemented"))
}

func (UnimplementedStockServiceHandler) InboundAccept(context.Context, *connect.Request[v1.InboundAcceptRequest]) (*connect.Response[v1.InboundAcceptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.InboundAccept is not implemented"))
}

func (UnimplementedStockServiceHandler) StockAdjustment(context.Context, *connect.Request[v1.StockAdjustmentRequest]) (*connect.Response[v1.StockAdjustmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.StockAdjustment is not implemented"))
}

func (UnimplementedStockServiceHandler) TransferToWarehouse(context.Context, *connect.Request[v1.TransferToWarehouseRequest]) (*connect.Response[v1.TransferToWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.TransferToWarehouse is not implemented"))
}

func (UnimplementedStockServiceHandler) TransferToWarehouseAccept(context.Context, *connect.Request[v1.TransferToWarehouseAcceptRequest]) (*connect.Response[v1.TransferToWarehouseAcceptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.TransferToWarehouseAccept is not implemented"))
}

func (UnimplementedStockServiceHandler) TransferToWarehouseCancel(context.Context, *connect.Request[v1.TransferToWarehouseCancelRequest]) (*connect.Response[v1.TransferToWarehouseCancelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stock_iface.v1.StockService.TransferToWarehouseCancel is not implemented"))
}
