// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stock_iface/v1/stock.proto

package stock_ifaceconnect

import (
	connect "connectrpc.com/connect"
	_ "github.com/pdcgo/schema/services/stock_iface/v1"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StockServiceName is the fully-qualified name of the StockService service.
	StockServiceName = "stock_iface.v1.StockService"
)

// StockServiceClient is a client for the stock_iface.v1.StockService service.
type StockServiceClient interface {
}

// NewStockServiceClient constructs a client for the stock_iface.v1.StockService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStockServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StockServiceClient {
	return &stockServiceClient{}
}

// stockServiceClient implements StockServiceClient.
type stockServiceClient struct {
}

// StockServiceHandler is an implementation of the stock_iface.v1.StockService service.
type StockServiceHandler interface {
}

// NewStockServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStockServiceHandler(svc StockServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/stock_iface.v1.StockService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStockServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStockServiceHandler struct{}
