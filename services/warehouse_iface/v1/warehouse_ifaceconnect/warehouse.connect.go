// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: warehouse_iface/v1/warehouse.proto

package warehouse_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/warehouse_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WarehouseServiceName is the fully-qualified name of the WarehouseService service.
	WarehouseServiceName = "warehouse_iface.v1.WarehouseService"
	// WarehouseFinanceServiceName is the fully-qualified name of the WarehouseFinanceService service.
	WarehouseFinanceServiceName = "warehouse_iface.v1.WarehouseFinanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WarehouseFinanceServiceExpenseAccountGetProcedure is the fully-qualified name of the
	// WarehouseFinanceService's ExpenseAccountGet RPC.
	WarehouseFinanceServiceExpenseAccountGetProcedure = "/warehouse_iface.v1.WarehouseFinanceService/ExpenseAccountGet"
)

// WarehouseServiceClient is a client for the warehouse_iface.v1.WarehouseService service.
type WarehouseServiceClient interface {
}

// NewWarehouseServiceClient constructs a client for the warehouse_iface.v1.WarehouseService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWarehouseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WarehouseServiceClient {
	return &warehouseServiceClient{}
}

// warehouseServiceClient implements WarehouseServiceClient.
type warehouseServiceClient struct {
}

// WarehouseServiceHandler is an implementation of the warehouse_iface.v1.WarehouseService service.
type WarehouseServiceHandler interface {
}

// NewWarehouseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWarehouseServiceHandler(svc WarehouseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/warehouse_iface.v1.WarehouseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWarehouseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWarehouseServiceHandler struct{}

// WarehouseFinanceServiceClient is a client for the warehouse_iface.v1.WarehouseFinanceService
// service.
type WarehouseFinanceServiceClient interface {
	// balance
	ExpenseAccountGet(context.Context, *connect.Request[v1.ExpenseAccountGetRequest]) (*connect.Response[v1.ExpenseAccountGetResponse], error)
}

// NewWarehouseFinanceServiceClient constructs a client for the
// warehouse_iface.v1.WarehouseFinanceService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWarehouseFinanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WarehouseFinanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	warehouseFinanceServiceMethods := v1.File_warehouse_iface_v1_warehouse_proto.Services().ByName("WarehouseFinanceService").Methods()
	return &warehouseFinanceServiceClient{
		expenseAccountGet: connect.NewClient[v1.ExpenseAccountGetRequest, v1.ExpenseAccountGetResponse](
			httpClient,
			baseURL+WarehouseFinanceServiceExpenseAccountGetProcedure,
			connect.WithSchema(warehouseFinanceServiceMethods.ByName("ExpenseAccountGet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// warehouseFinanceServiceClient implements WarehouseFinanceServiceClient.
type warehouseFinanceServiceClient struct {
	expenseAccountGet *connect.Client[v1.ExpenseAccountGetRequest, v1.ExpenseAccountGetResponse]
}

// ExpenseAccountGet calls warehouse_iface.v1.WarehouseFinanceService.ExpenseAccountGet.
func (c *warehouseFinanceServiceClient) ExpenseAccountGet(ctx context.Context, req *connect.Request[v1.ExpenseAccountGetRequest]) (*connect.Response[v1.ExpenseAccountGetResponse], error) {
	return c.expenseAccountGet.CallUnary(ctx, req)
}

// WarehouseFinanceServiceHandler is an implementation of the
// warehouse_iface.v1.WarehouseFinanceService service.
type WarehouseFinanceServiceHandler interface {
	// balance
	ExpenseAccountGet(context.Context, *connect.Request[v1.ExpenseAccountGetRequest]) (*connect.Response[v1.ExpenseAccountGetResponse], error)
}

// NewWarehouseFinanceServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWarehouseFinanceServiceHandler(svc WarehouseFinanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	warehouseFinanceServiceMethods := v1.File_warehouse_iface_v1_warehouse_proto.Services().ByName("WarehouseFinanceService").Methods()
	warehouseFinanceServiceExpenseAccountGetHandler := connect.NewUnaryHandler(
		WarehouseFinanceServiceExpenseAccountGetProcedure,
		svc.ExpenseAccountGet,
		connect.WithSchema(warehouseFinanceServiceMethods.ByName("ExpenseAccountGet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/warehouse_iface.v1.WarehouseFinanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WarehouseFinanceServiceExpenseAccountGetProcedure:
			warehouseFinanceServiceExpenseAccountGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWarehouseFinanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWarehouseFinanceServiceHandler struct{}

func (UnimplementedWarehouseFinanceServiceHandler) ExpenseAccountGet(context.Context, *connect.Request[v1.ExpenseAccountGetRequest]) (*connect.Response[v1.ExpenseAccountGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("warehouse_iface.v1.WarehouseFinanceService.ExpenseAccountGet is not implemented"))
}
