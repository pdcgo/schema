// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: withdrawal_iface/v1/withdrawal.proto

package withdrawal_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdcgo/schema/services/withdrawal_iface/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WithdrawalServiceName is the fully-qualified name of the WithdrawalService service.
	WithdrawalServiceName = "withdrawal_iface.v1.WithdrawalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WithdrawalServiceSubmitWithdrawalProcedure is the fully-qualified name of the WithdrawalService's
	// SubmitWithdrawal RPC.
	WithdrawalServiceSubmitWithdrawalProcedure = "/withdrawal_iface.v1.WithdrawalService/SubmitWithdrawal"
	// WithdrawalServiceGetTaskListProcedure is the fully-qualified name of the WithdrawalService's
	// GetTaskList RPC.
	WithdrawalServiceGetTaskListProcedure = "/withdrawal_iface.v1.WithdrawalService/GetTaskList"
	// WithdrawalServiceRunProcedure is the fully-qualified name of the WithdrawalService's Run RPC.
	WithdrawalServiceRunProcedure = "/withdrawal_iface.v1.WithdrawalService/Run"
	// WithdrawalServiceStopProcedure is the fully-qualified name of the WithdrawalService's Stop RPC.
	WithdrawalServiceStopProcedure = "/withdrawal_iface.v1.WithdrawalService/Stop"
	// WithdrawalServiceHealthCheckProcedure is the fully-qualified name of the WithdrawalService's
	// HealthCheck RPC.
	WithdrawalServiceHealthCheckProcedure = "/withdrawal_iface.v1.WithdrawalService/HealthCheck"
)

// WithdrawalServiceClient is a client for the withdrawal_iface.v1.WithdrawalService service.
type WithdrawalServiceClient interface {
	SubmitWithdrawal(context.Context, *connect.Request[v1.SubmitWithdrawalRequest]) (*connect.Response[v1.SubmitWithdrawalResponse], error)
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
	Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
	Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewWithdrawalServiceClient constructs a client for the withdrawal_iface.v1.WithdrawalService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWithdrawalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WithdrawalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	withdrawalServiceMethods := v1.File_withdrawal_iface_v1_withdrawal_proto.Services().ByName("WithdrawalService").Methods()
	return &withdrawalServiceClient{
		submitWithdrawal: connect.NewClient[v1.SubmitWithdrawalRequest, v1.SubmitWithdrawalResponse](
			httpClient,
			baseURL+WithdrawalServiceSubmitWithdrawalProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("SubmitWithdrawal")),
			connect.WithClientOptions(opts...),
		),
		getTaskList: connect.NewClient[v1.GetTaskListRequest, v1.GetTaskListResponse](
			httpClient,
			baseURL+WithdrawalServiceGetTaskListProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("GetTaskList")),
			connect.WithClientOptions(opts...),
		),
		run: connect.NewClient[v1.RunRequest, v1.RunResponse](
			httpClient,
			baseURL+WithdrawalServiceRunProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("Run")),
			connect.WithClientOptions(opts...),
		),
		stop: connect.NewClient[v1.StopRequest, v1.StopResponse](
			httpClient,
			baseURL+WithdrawalServiceStopProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("Stop")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+WithdrawalServiceHealthCheckProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// withdrawalServiceClient implements WithdrawalServiceClient.
type withdrawalServiceClient struct {
	submitWithdrawal *connect.Client[v1.SubmitWithdrawalRequest, v1.SubmitWithdrawalResponse]
	getTaskList      *connect.Client[v1.GetTaskListRequest, v1.GetTaskListResponse]
	run              *connect.Client[v1.RunRequest, v1.RunResponse]
	stop             *connect.Client[v1.StopRequest, v1.StopResponse]
	healthCheck      *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// SubmitWithdrawal calls withdrawal_iface.v1.WithdrawalService.SubmitWithdrawal.
func (c *withdrawalServiceClient) SubmitWithdrawal(ctx context.Context, req *connect.Request[v1.SubmitWithdrawalRequest]) (*connect.Response[v1.SubmitWithdrawalResponse], error) {
	return c.submitWithdrawal.CallUnary(ctx, req)
}

// GetTaskList calls withdrawal_iface.v1.WithdrawalService.GetTaskList.
func (c *withdrawalServiceClient) GetTaskList(ctx context.Context, req *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return c.getTaskList.CallUnary(ctx, req)
}

// Run calls withdrawal_iface.v1.WithdrawalService.Run.
func (c *withdrawalServiceClient) Run(ctx context.Context, req *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return c.run.CallUnary(ctx, req)
}

// Stop calls withdrawal_iface.v1.WithdrawalService.Stop.
func (c *withdrawalServiceClient) Stop(ctx context.Context, req *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// HealthCheck calls withdrawal_iface.v1.WithdrawalService.HealthCheck.
func (c *withdrawalServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// WithdrawalServiceHandler is an implementation of the withdrawal_iface.v1.WithdrawalService
// service.
type WithdrawalServiceHandler interface {
	SubmitWithdrawal(context.Context, *connect.Request[v1.SubmitWithdrawalRequest]) (*connect.Response[v1.SubmitWithdrawalResponse], error)
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
	Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
	Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewWithdrawalServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWithdrawalServiceHandler(svc WithdrawalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	withdrawalServiceMethods := v1.File_withdrawal_iface_v1_withdrawal_proto.Services().ByName("WithdrawalService").Methods()
	withdrawalServiceSubmitWithdrawalHandler := connect.NewUnaryHandler(
		WithdrawalServiceSubmitWithdrawalProcedure,
		svc.SubmitWithdrawal,
		connect.WithSchema(withdrawalServiceMethods.ByName("SubmitWithdrawal")),
		connect.WithHandlerOptions(opts...),
	)
	withdrawalServiceGetTaskListHandler := connect.NewUnaryHandler(
		WithdrawalServiceGetTaskListProcedure,
		svc.GetTaskList,
		connect.WithSchema(withdrawalServiceMethods.ByName("GetTaskList")),
		connect.WithHandlerOptions(opts...),
	)
	withdrawalServiceRunHandler := connect.NewUnaryHandler(
		WithdrawalServiceRunProcedure,
		svc.Run,
		connect.WithSchema(withdrawalServiceMethods.ByName("Run")),
		connect.WithHandlerOptions(opts...),
	)
	withdrawalServiceStopHandler := connect.NewUnaryHandler(
		WithdrawalServiceStopProcedure,
		svc.Stop,
		connect.WithSchema(withdrawalServiceMethods.ByName("Stop")),
		connect.WithHandlerOptions(opts...),
	)
	withdrawalServiceHealthCheckHandler := connect.NewUnaryHandler(
		WithdrawalServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(withdrawalServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/withdrawal_iface.v1.WithdrawalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WithdrawalServiceSubmitWithdrawalProcedure:
			withdrawalServiceSubmitWithdrawalHandler.ServeHTTP(w, r)
		case WithdrawalServiceGetTaskListProcedure:
			withdrawalServiceGetTaskListHandler.ServeHTTP(w, r)
		case WithdrawalServiceRunProcedure:
			withdrawalServiceRunHandler.ServeHTTP(w, r)
		case WithdrawalServiceStopProcedure:
			withdrawalServiceStopHandler.ServeHTTP(w, r)
		case WithdrawalServiceHealthCheckProcedure:
			withdrawalServiceHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWithdrawalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWithdrawalServiceHandler struct{}

func (UnimplementedWithdrawalServiceHandler) SubmitWithdrawal(context.Context, *connect.Request[v1.SubmitWithdrawalRequest]) (*connect.Response[v1.SubmitWithdrawalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v1.WithdrawalService.SubmitWithdrawal is not implemented"))
}

func (UnimplementedWithdrawalServiceHandler) GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v1.WithdrawalService.GetTaskList is not implemented"))
}

func (UnimplementedWithdrawalServiceHandler) Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v1.WithdrawalService.Run is not implemented"))
}

func (UnimplementedWithdrawalServiceHandler) Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v1.WithdrawalService.Stop is not implemented"))
}

func (UnimplementedWithdrawalServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v1.WithdrawalService.HealthCheck is not implemented"))
}
