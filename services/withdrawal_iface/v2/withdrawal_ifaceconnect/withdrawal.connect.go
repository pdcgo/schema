// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: withdrawal_iface/v2/withdrawal.proto

package withdrawal_ifaceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/pdcgo/schema/services/withdrawal_iface/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WithdrawalServiceName is the fully-qualified name of the WithdrawalService service.
	WithdrawalServiceName = "withdrawal_iface.v2.WithdrawalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WithdrawalServiceSubmitWithdrawalProcedure is the fully-qualified name of the WithdrawalService's
	// SubmitWithdrawal RPC.
	WithdrawalServiceSubmitWithdrawalProcedure = "/withdrawal_iface.v2.WithdrawalService/SubmitWithdrawal"
)

// WithdrawalServiceClient is a client for the withdrawal_iface.v2.WithdrawalService service.
type WithdrawalServiceClient interface {
	SubmitWithdrawal(context.Context, *connect.Request[v2.SubmitWithdrawalRequest]) (*connect.ServerStreamForClient[v2.SubmitWithdrawalResponse], error)
}

// NewWithdrawalServiceClient constructs a client for the withdrawal_iface.v2.WithdrawalService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWithdrawalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WithdrawalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	withdrawalServiceMethods := v2.File_withdrawal_iface_v2_withdrawal_proto.Services().ByName("WithdrawalService").Methods()
	return &withdrawalServiceClient{
		submitWithdrawal: connect.NewClient[v2.SubmitWithdrawalRequest, v2.SubmitWithdrawalResponse](
			httpClient,
			baseURL+WithdrawalServiceSubmitWithdrawalProcedure,
			connect.WithSchema(withdrawalServiceMethods.ByName("SubmitWithdrawal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// withdrawalServiceClient implements WithdrawalServiceClient.
type withdrawalServiceClient struct {
	submitWithdrawal *connect.Client[v2.SubmitWithdrawalRequest, v2.SubmitWithdrawalResponse]
}

// SubmitWithdrawal calls withdrawal_iface.v2.WithdrawalService.SubmitWithdrawal.
func (c *withdrawalServiceClient) SubmitWithdrawal(ctx context.Context, req *connect.Request[v2.SubmitWithdrawalRequest]) (*connect.ServerStreamForClient[v2.SubmitWithdrawalResponse], error) {
	return c.submitWithdrawal.CallServerStream(ctx, req)
}

// WithdrawalServiceHandler is an implementation of the withdrawal_iface.v2.WithdrawalService
// service.
type WithdrawalServiceHandler interface {
	SubmitWithdrawal(context.Context, *connect.Request[v2.SubmitWithdrawalRequest], *connect.ServerStream[v2.SubmitWithdrawalResponse]) error
}

// NewWithdrawalServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWithdrawalServiceHandler(svc WithdrawalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	withdrawalServiceMethods := v2.File_withdrawal_iface_v2_withdrawal_proto.Services().ByName("WithdrawalService").Methods()
	withdrawalServiceSubmitWithdrawalHandler := connect.NewServerStreamHandler(
		WithdrawalServiceSubmitWithdrawalProcedure,
		svc.SubmitWithdrawal,
		connect.WithSchema(withdrawalServiceMethods.ByName("SubmitWithdrawal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/withdrawal_iface.v2.WithdrawalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WithdrawalServiceSubmitWithdrawalProcedure:
			withdrawalServiceSubmitWithdrawalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWithdrawalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWithdrawalServiceHandler struct{}

func (UnimplementedWithdrawalServiceHandler) SubmitWithdrawal(context.Context, *connect.Request[v2.SubmitWithdrawalRequest], *connect.ServerStream[v2.SubmitWithdrawalResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("withdrawal_iface.v2.WithdrawalService.SubmitWithdrawal is not implemented"))
}
